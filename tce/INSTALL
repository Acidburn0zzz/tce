Library and tools version prerequisites for TCE
===============================================

These are the current prerequisites for libraries and tools required to
build TCE:

Compiler              supported versions
-----------------     ----------------
GCC                   3.2.2+

Library               supported versions                   library license
-----------------     ------------------                   ---------------
Xerces-C++            2.3.0+                               Apache v2.0
wxWidgets             2.6.0+                               wxWidgets
Tcl                   8.0-8.4                              BSD-style
Boost                 1.42.0-1.53.0                        very permissive
sqlite3               3.0.0+                               public domain
LLVM                  3.2, 3.1                             LLVM Release License
Editline              2.9                                  BSD-style
Python                2.4-2.8                              PSF license

Remarks concerning all libraries
--------------------------------
Remember to install the '-dev' versions of the packages in order to get
the library headers which are need to compile client code against them.
You also need a version of "GNU Make" to build TCE.

For example, to install the required libraries and tools for Ubuntu 
using its package manager 'apt-get', you need to execute the following 
command: 

  sudo apt-get install libwxgtk2.8-dev libboost-{filesystem,graph,regex,thread}-dev \
    tcl8.4-dev libedit-dev libsqlite3-dev sqlite3 libxerces-c2-dev g++ make latex2html \
    libffi-dev

Editline
--------
Editline is used for command line editing/history browsing capabilities to 
the command line interface of the simulator.

You can download the sources here: http://www.thrysoee.dk/editline/

Note: this library might require 'termcap' library in some distributions. 
The package is named 'libedit-dev' in Debian-based distributions.

Boost
-----
The development files of the following Boost libraries are required by TCE:
. regexp,
. spirit,
. filesystem,
. format,
. thread,
. graph,
. tuple

Some distributions, like Fedora Core, include all Boost libraries in a 
single package, but some, like Debian, have separated them in several 
packages. 

LLVM and Clang
--------------
In order to compile programs from C/C++ with TCE, you need to install 
LLVM and Clang.

Unless a correct LLVM version is available for your distribution, 
the best way is to install it from the sources. 

Please follow the steps below to ensure LLVM and Clang are built
correctly to be used by TCE:

 1) download the LLVM package
    wget http://llvm.org/releases/3.2/llvm-3.2.src.tar.gz
 2) unpack the package, e.g. tar xfz llvm-3.2.src.tar.gz
 3) cd llvm-3.2.src/tools
 4) download the clang package 
    wget http://llvm.org/releases/3.2/clang-3.2.src.tar.gz
 5) unpack clang to llvm-3.2.src/tools, e.g. tar xfz clang-3.2.src.tar.gz
 6) mv clang-3.2.src clang
 7) cd ..

IMPORTANT NOTE! In order to use LLVM with TCE you need to configure LLVM 
with '--enable-shared' switch and compile it with 'make REQUIRES_RTTI=1',
as follows:

 8) ./configure --enable-shared --prefix=YOUR_INSTALLATION_PREFIX_HERE 
 9) make REQUIRES_RTTI=1 && make install

Building and installing TCE
===========================

Finally, after the required libraries have been installed,
the following steps show how to build and install the TCE toolset.

Setting compiler options
------------------------
Be sure to set CXXFLAGS environment variable to include aggressive 
optimization flags (e.g., "export CXXFLAGS=-O3") before running 
the 'configure' script. This results in a much more efficient TCE toolset.
Most notably the architecture simulator can be more than 10x faster when 
compiled with aggressive compilation flags.

Configuring TCE
---------------
First, to create Makefiles you have to run configure as follows:

    ./configure --prefix=INSTALLATION_DIRECTORY

If you don't give a prefix, TCE will be installed under /usr/local/.
In that case you have to install TCE as the root user.

Running 'make'
--------------
After running configure, it should be enough to just type

      make && make install

After installing TCE to somewhere in PATH, you can run a "smoke test" suite
for the most important tools in the TCE installation by running the command
'tce-selftest -v'. This might take a couple of hours, depending on your
computer's speed.

optional: Creating the build scripts
------------------------------------
If you have downloaded a TCE release package, you should omit this step.
However, if you checkout TCE from the version control, you noticed that
the development version does not ship with a pregenerated 'configure' script.

In order to build the development version, you need to generate the
build scripts by running './autogen.sh' in the TCE root directory.
For this to work you need to install packages 'libtool', 'automake' and 
'autoconf'.

OpenCL support
==============
There is experimental and incomplete support for OpenCL. It's currently 
not usable for day-to-day OpenCL programming but is a work in progress. 
If you want to compile the support, for example, to help in implementing 
the missing features, read on.

The OpenCL support uses the pocl project. In order to use TCE with the 
OpenCL support, install pocl so it can be found in your PATH and
PKG_CONFIG_PATH. You can get it from http://launchpad.net/pocl.
The tcecc compiler driver detects at runtime if you have pocl installed and
enables the OpenCL C compilation feature. You can verify this by 
running 'tcecc --supported-languages' which should list 'OpenCL C'.

See the TCE User Manual for more information on using the OpenCL in
"offline mode". The another option is to use the 'ttasim' driver of
pocl to simulate a host-device setup where the device is a TTA core
(simulated using the ttasim engine). Refer to the pocl documentation on
how to use it.

optional: Compiling the tce-llvm-gcc compiler
---------------------------------------------

As of TCE 1.4 Clang became the only supported TCE compiler frontend for now.
