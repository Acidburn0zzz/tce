Building and installation
=========================

If you want working compiler and libc, before building tce you should 
build and install tce-llvm-gcc compiler. Instructions for doing so is
found from tce-llvm-gcc/README.txt file.

Building and installation with the help of autotools should be very easy. 
First, to create Makefiles you have to run configure as follows:

    ./configure --prefix=INSTALLATION_DIRECTORY

If you don't give prefix, the software will be installed in /usr/local/.
In that case you have to install TCE as root. 

Be sure to set CXXFLAGS environment variable to include aggressive 
optimization flags (e.g., "export CXXFLAGS=-O3") before running 
the configure script. This results in much more efficient TCE toolset, 
most notably the simulator is often more than 10x faster when compiled 
with aggressive compiler flags.

After running configure, it should be enough to just type

      make
      make install

In order to compile C code you need to also compile the C frontend,
tce-llvm-gcc. It has its own INSTALL file.

After installing TCE to somewhere in PATH, you can run a "smoke test" suite
for the most important tools in TCE installation by running the command
'tce-selftest -v'. This might take up to two hours, depending on your
computer.

Building the development version
================================

The development version does not ship with a pregenerated 'configure' script.
In order to build the development version, one needs to generate the
configure script by running 'autoreconf -i --force' in the TCE root directory.
For this to work you need to install packages 'libtool', 'automake1.9' and 
'autoconf'.

Library and tools version prerequisites
=======================================

These are the current prerequisites for libraries and tools used by TCE:

Compiler              supported versions
-----------------     ----------------
GCC                   3.2.2+

Library               supported versions                   library licence
-----------------     ------------------                   ---------------
Xerces                2.3.0+                               Apache v2.0
wxWidgets             2.6.0+                               wxWidgets
Tcl                   8.0-8.4                              BSD-style
Boost                 1.33+                                very permissive
sqlite3               3.0.0+                               public domain
LLVM                  2.5                                  LLVM Release License
Editline              2.9                                  BSD-style

    Editline is used for command line editing/history browsing capabilities to 
    the command line interface of the simulator.

    You can download the sources here: http://www.thrysoee.dk/editline/

    Note: this library might require 'termcap' library in some distributions. 
    The package is named 'libedit-dev' in Debian-based distributions.

The development files of the following Boost libraries are required by TCE:
. regexp,
. spirit,
. filesystem,
. format,
. thread,
. graph,
. tuple

Some distributions, like Fedora Core, include all Boost libraries in a 
single package, but some, like Debian, have separated them in several 
packages. 

Remember to install the '-dev' versions of the packages in order to get
the library headers which are need to compile client code against them.
You also need a version of "GNU Make" to build TCE.

For example, to install the required libraries and tools for Ubuntu using 
its package manager 'apt-get', you need to execute the following command
as root: 

apt-get install libwxgtk2.8-dev libboost-{filesystem,graph,regex,thread}-dev \
                tcl8.4-dev libedit-dev libsqlite3-dev sqlite3 \
                libxerces27-dev g++ make latex2html

NOTE! In order to compile programs from C, you need to install LLVM. There
are no decent Debian packages available for older Debian/Ubuntu versions, 
so the best way is to install it from sources. You can download 
the LLVM sources from here: http://www.llvm.org/releases/
Remember to download a supported LLVM version, as listed above.

Note that after installing LLVM, you need to run a script shipped with
TCE called 'gen_llvm_shared_lib.sh' (usually as root, e.g., 
'sudo ./gen_llvm_shared_lib.sh')  to generate a shared version of
LLVM libraries required by TCE. This is due to a broken shared library
build of LLVM and hopefully is not needed with the future LLVM
versions.

Tcl 8.5 has a bug with stack size detection which causes Proxim's interpreter
to not work at all with it, therefore it's not supported by TCE at the moment.

See the TCE Bug report for more info.

  http://tce.cs.tut.fi/cgi-bin/tce-bugzilla/show_bug.cgi?id=14


Troubleshooting
===============

TCE on 64-bit distributions
---------------------------

If you compile LLVM from sources you should give --enable-pic option for
the LLVM's configure script. Otherwise compilation of TCE might fail.

Red Hat Enterprise Linux 4.x (or CentOS 4.x)
--------------------------------------------

This distribution does not provide majority of the libraries
required by TCE. In addition, it ships quite old gcc, 
the version 3.4.x.

In order to make compiling TCE in this system easier, we distribute
a binary package for the required libraries.

Download it for x86-64 from:

	http://tce.cs.tut.fi/lib/tce_libs-CentOS4.6-x64.tar.gz

After unpacking the archive to /opt, one should regenerate
the build scripts by going to the root of the tce sources and
executing the following command:

	/opt/tce_libs/bin/autoreconf

Then TCE build should be configured with the following command line:

CXXFLAGS=-O3 CFLAGS=-O3 ./configure --with-boost=/opt/tce_libs --with-xerces=/opt/tce_libs \
            --with-xerces=/opt/tce_libs --with-editline=/opt/tce_libs \
            --with-sqlite3=/opt/tce_libs

After this TCE should build and install with:

	make && sudo make install


Red Hat Enterprise Linux 4.x (or CentOS 4.x) libraries from sources
===================================================================
If you wish to compile the libraries yourself, here is a quick howto for
x86-64 distibutions. Let's assume the install directory is /opt/tce_libs

xerces-c-2.7:
-------------
unzipped to: /home/<user>/pkg_src/xerces-c-2.7.0-src
export XERCESCROOT env before running configure:
$ export XERCESCROOT=/home/<user>/pkg_src/xerces-c-2.7.0-src
$ cd /home/<user>/pkg_src/xerces-c-2.7.0-src
$ chmod a+x runConfigure configure
$ ./runConfigure -p linux -P /opt/tce_libs -b 64
$ gmake
$ su
# make install
# ldconfig

wxGTK-2.8.9:
------------
unzipped to /home/<user>/pkg_src/wxGTK-2.8.9
$ cd /home/<user>/pkg_src/wxGTK-2.8.9
$ mkdir gtkbuild && cd gtkbuild
$ ../configure --prefix=/opt/tce_libs
$ make
$ su
# make install
# ldconfig

libedit:
--------
unzipped to /home/<user>/pkg_src/libedit-<version>
$ cd /home/<user>/pkg_src/libedit-<version>
$ ./configure --prefix=/opt/tce_libs
$ make
$ su
# make install
# ldconfig

sqlite3:
--------
unzipped to /home/<user>/pkg_src/sqlite-3.6.4
$ cd /home/<user>/pkg_src/sqlite-3.6.4
$ ./configure --prefix=/opt/tce_libs
$ make
$ su
# make install
# ldconfig

boost:
------
unzipped to /home/<user>/pkg_src/boost_1_36_0
$ cd /home/<user>/pkg_src/boost_1_36_0
$ ./configure --prefix=/opt/tce_libs

llvm-2.5:
---------
unzipped to /home/<user>/pkg_src/llvm-2.5
$ cd /home/<user>/pkg_src/llvm-2.5
$ mkdir build && cd build
$ ../configure --prefix=/opt/tce_libs --enable-pic

changing ENVs
-------------
export PATH=/opt/tce_libs/bin:$PATH
export LD_LIBRARY_PATH=/opt/tce-libs/lib:$LD_LIBRARY_PATH

FreeBSD
=======

All the needed libraries except llvm are available on the ports collection.

Compilation and installation works the same way as in any Linux distro, but
the fact FreeBSD (at least 6.x-RELEASE) uses gcc-3.x series instead of 4.x, and
that some headers & libraries are installed in a different location than in
Ubuntu, makes the use of some configure switches neccessary:

./configure --prefix=INSTALLATION_DIRECTORY                     \
            --with-tcl-headers=/usr/local/include/tcl8.4        \
            CPPFLAGS=-I/usr/local/include                       \
            CXXFLAGS="-O3 -W -Wall -pedantic -Wno-long-long -g" \
            LDFLAGS=-L/usr/local/lib

After configure step ends, copy /usr/local/bin/libtool to the build directory
(i.e. the directory you ran configure script in) and then you are ready to
compile:

gmake && gmake install

(default system make is BSD make in FreeBSD systems, we need to use gmake
to run GNU make).
