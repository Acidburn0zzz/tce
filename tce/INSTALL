Operating system
================

TCE requires a Unix-style operating system which nowadays typically means
Linux. Debian-based distributions like Debian and Ubuntu should have
most of the required libraries included, but other distributions
should work fine too. MacOS support is experimental.

Quick Installation Instructions for Debian-Based Distributions
==============================================================

These instructions install everything locally under $HOME/local.

* Install the required tools and libraries:

This needs root/admin privileges.

  ## In Debian 7:

  sudo apt-get install libwxgtk2.8-dev libboost-{filesystem,graph,regex,thread}-dev \
    tcl8.4-dev libedit-dev libsqlite3-dev sqlite3 libxerces-c2-dev g++ make latex2html \
    libffi-dev autoconf automake libtool subversion bzr

  ## Ubuntu 14.04 LTS:
  ## You need to enable the universe and multiverse repositories first:
  ## https://help.ubuntu.com/community/Repositories/Ubuntu#Adding_Repositories_in_Ubuntu
  sudo apt-get install libwxgtk2.8-dev libboost-all-dev \
    tcl8.4-dev libedit-dev libsqlite3-dev sqlite3 libxerces-c2-dev g++ make latex2html \
    libffi-dev autoconf automake libtool subversion git cmake

  ## Ubuntu 16.04 LTS:
  ## You need to enable the universe and multiverse repositories first:
  ## https://help.ubuntu.com/community/Repositories/Ubuntu#Adding_Repositories_in_Ubuntu
  sudo apt-get install libwxgtk3.0-dev libboost-all-dev \
    tcl8.6-dev libedit-dev libsqlite3-dev sqlite3 libxerces-c-dev g++ make latex2html \
    libffi-dev autoconf automake libtool subversion git cmake

* Get the latest TCE source code from the version control system:

  git clone https://github.com/cpc/tce.git tce-devel

* Build and install LLVM with some minor patches for TCE:

  cd tce-devel/tce
  sudo apt-get install subversion cmake
  sudo tools/scripts/install_llvm_7.0.sh $HOME/local

* Now you need to set the libraries and the binaries location in your home dir
  to search paths:

  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/local/lib
  export PATH=$PATH:$HOME/local/bin
  export LDFLAGS=-L$HOME/local/lib

You better put the above environment variable modification commands to
your ~/.bashrc or similar so they are taken in effect automatically whenever
you start a new shell. Otherwise you need to remember to enter them
before attempting to use TCE.

* Build and install TCE.

  ./autogen.sh
  ./configure --prefix=$HOME/local
  make
  make install

Now TCE commands such as 'ttasim' should work. Check this with:

  ttasim --version

You can now try to run the smoke test script to see if it finds any problems with
your installation:

  # You might need to add your TCE to the dynamic lib search paths first:

  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib/tce

  # If this prints version correctly the dynlib is found correcty:

  ttasim -v

  # Then run the smoke test:

  tce-selftest -v

If this finished correctly, you are all set! For learning to use TCE,
a good way is to start with the TCE user manual's tutorials, e.g., the
"TCE tour".

Later on, if you want to update your TCE installation with the latest changes
committed in the version control system, you can do the following steps:

* Update the source code modifications.

  cd tce-devel/tce
  git pull

* Build and install the updated TCE:

  make -s all install

More Detailed Library and Tools Version Prerequisites
=====================================================

These are the current prerequisites for libraries and tools required to
build TCE:

Compiler              supported versions
-----------------     ------------------
GCC                   4.7+
Clang                 3.5+

Library               supported versions                   library license
-----------------     ------------------                   ---------------
Xerces-C++            2.3.0+                               Apache v2.0
wxWidgets             2.8+                                 wxWidgets
Tcl                   8.0-8.4                              BSD-style
Boost                 1.48.0-1.53.0                        very permissive
sqlite3               3.2.0+                               public domain
LLVM                  6.0-7.0                              LLVM Release License
Editline              2.9                                  BSD-style
Python                2.4-2.8                              PSF license

Remarks concerning all libraries
--------------------------------

Remember to install the '-dev' versions of the packages in order to get
the library headers which are need to compile client code against them.
You also need a version of "GNU Make" to build TCE.

Editline
--------

Editline is used for command line editing/history browsing capabilities to
the command line interface of the simulator.

You can download the sources here: http://www.thrysoee.dk/editline/

Note: this library might require 'termcap' library in some distributions.
The package is named 'libedit-dev' in Debian-based distributions.

Boost
-----
The development files of the following Boost libraries are required by TCE:
. regexp,
. spirit,
. filesystem,
. format,
. thread,
. graph,
. tuple

Some distributions, like Fedora Core, include all Boost libraries in a
single package, but some, like Debian, have separated them in several
packages. 

LLVM and Clang
--------------

In order to compile programs from C/C++ with TCE, you need to install 
LLVM and Clang with some patches and correct LLVM build switches to fix 
issues affecting TCE use.

You can do this most easily by executing 
 
   tools/scripts/install_llvm_7.0.sh DEST_PATH

where DEST_PATH is the absolute directory where you want the LLVM
to be installed. This script installs some required patches
to LLVM without which TCE refuses to build.

Building and installing TCE
===========================

After the required libraries have been installed, the following 
steps show how to build and install the TCE toolset.

Creating the build scripts
--------------------------

The scripts can be generated by running './autogen.sh' in the 
TCE root directory (where configure.ac is in). autogen.sh 
requires the autotools. I.e., you need 'libtool', 'automake' and 
'autoconf' installed in your system.

Setting compiler options
------------------------
Be sure to set CXXFLAGS environment variable to include aggressive 
optimization flags (e.g., "export CXXFLAGS=-O3") before running 
the 'configure' script. This results in a much more efficient TCE toolset.
Most notably the architecture simulator can be more than 10x faster when 
compiled with aggressive compilation flags.

Configuring TCE
---------------
First, to create Makefiles you have to run configure as follows:

    ./configure --prefix=INSTALLATION_DIRECTORY

If you don't give a prefix, TCE will be installed under /usr/local/.
In that case you have to install TCE as the root user.

Running 'make'
--------------

After running configure, it should be enough to just type

      make && make install

Note: you need to run 'make' before 'make install' due to a newlib's
build system issue.

After installing TCE to somewhere in PATH, you can run a "smoke test" suite
for the most important tools in the TCE installation by running the command
'tce-selftest -v'. This might take a couple of hours, depending on your
computer's speed.
