from binding_generator import *

prefix="./TCE-include/"

bg = binding_generator_t(
    module_name = "ControlFlowGraph",
    call_policies = (('BasicBlock',
                      [('copy', return_value_policy(manage_new_object)),
                       ('statistics', return_internal_reference())]),
                     ('BasicBlockNode',
                      [('basicBlock', return_internal_reference())]),
                     ('ControlFlowGraph',
                      [('entryNode', return_value_policy(reference_existing_object)),
                       ('exitNode', return_value_policy(reference_existing_object)),
                       ('program', return_value_policy(reference_existing_object))]),
                     ),

    headers = [prefix + "BasicBlock.hh",
               prefix + "BasicBlockNode.hh",
               prefix + "ControlFlowEdge.hh",
               prefix + "CFGStatistics.hh",
               prefix + "ControlFlowGraph.hh"
               ],
    extra_headers = ["Procedure.hh",
                    ],
    extra_member_registrations =
    [('ControlFlowGraph',
      ["""def("node"
      , (::BasicBlockNode & ( ::ControlFlowGraph::* )( int const ) const)(&::ControlFlowGraph::node),
      ( bp::arg("index") ),
            bp::return_internal_reference<1>())""",
       """def("node"
       , (::BasicBlockNode & ( ::ControlFlowGraph::* )( int const,bool ) const)( &::ControlFlowGraph::node )
       , ( bp::arg("index"), bp::arg("cacheResult") ),
       bp::return_internal_reference<1>())""",
       """def("nodeCount", &::ControlFlowGraph::nodeCount)"""])]
    )

bg.run()
