from binding_generator import *

prefix = "../../src/tools/"


bg = binding_generator_t(
    module_name = "tools",
    call_policies = (('NullSimValue',
                      [('instance', return_value_policy(reference_existing_object))]),
                     ),
    headers = [prefix + "SimValue.hh"],
    extra_headers = ["Exception.hh"],

    excluded_members = [('SimValue', ['Value', 'value_'])],

    # Py++ does not generate these for some reason.
    extra_member_registrations =
    [('SimValue', ["""def("width", &SimValue::width)
        .def("isActive", &SimValue::isActive)
        .def("setActive", &SimValue::setActive)
        .def("clearActive", &SimValue::clearActive)
        .def("intValue", &SimValue::intValue)
        .def("unsignedValue", &SimValue::unsignedValue)
        .def("sIntWordValue", &SimValue::sIntWordValue)
        .def("uIntWordValue", &SimValue::uIntWordValue)
        .def("doubleWordValue", &SimValue::doubleWordValue)
        .def("floatWordValue", &SimValue::floatWordValue)
        .def( bp::self + bp::other< SIntWord >() )
        .def( bp::self + bp::other< UIntWord >() )
        .def( bp::self + bp::other< FloatWord >() )
        .def( bp::self + bp::other< DoubleWord >() )
        .def( bp::self - bp::other< SIntWord >() )
        .def( bp::self - bp::other< UIntWord >() )
        .def( bp::self - bp::other< FloatWord >() )
        .def( bp::self - bp::other< DoubleWord >() )
        .def( bp::self / bp::other< SIntWord >() )
        .def( bp::self / bp::other< UIntWord >() )
        .def( bp::self / bp::other< FloatWord >() )
        .def( bp::self / bp::other< DoubleWord >() )
        .def( bp::self * bp::other< SIntWord >() )
        .def( bp::self * bp::other< UIntWord >() )
        .def( bp::self * bp::other< FloatWord >() )
        .def( bp::self * bp::other< DoubleWord >() )
        .def( bp::self == bp::self )
        .def( bp::self == bp::other< int >() )
        .def( bp::self == bp::other< SIntWord >() )
        .def( bp::self == bp::other< UIntWord >() )
        .def( bp::self == bp::other< FloatWord >() )
        .def( bp::self == bp::other< DoubleWord >() )"""])]
    )

bg.run()
