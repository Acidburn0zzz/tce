# Copyright 2002-2008 Tampere University of Technology.  All Rights Reserved.
#
# This file is part of TTA-Based Codesign Environment (TCE).
#
# TCE is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License version 2 as published by the Free
# Software Foundation.
#
# TCE is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin St,
# Fifth Floor, Boston, MA  02110-1301  USA
#
# As a special exception, you may use this file as part of a free software
# library without restriction.  Specifically, if other files instantiate
# templates or use macros or inline functions from this file, or you compile
# this file and link it with other files to produce an executable, this file
# does not by itself cause the resulting executable to be covered by the GNU
# General Public License.  This exception does not however invalidate any
# other reasons why the executable file might be covered by the GNU General
# Public License.
# Helper classes for wrapper function creation

"""This sub-package provides text substitution services for creating C++ functions.

The helper classes in this package are meant to be used by the actual
calldef code creators (that are not part of this sub-package). They
implement the core of the "arg policy" mechanism which can be used by
a user to modify the source code for a function.

The main class of this sub-package is the class L{substitution_manager_t}. This
class maintains two sets of special variables, one for the wrapper function
and one for the virtual function, and provides text substitution services.
The variables contain parts of source code that can be inserted into the
function source code template which is generated by the user of the class.


"""

from transformer import transformer_t
import transformers
from function_transformation import function_transformation_t

def output( *args, **keywd ):
    def creator( function ):
        return transformers.output_t( function, *args, **keywd )
    return creator

def input( *args, **keywd ):
    def creator( function ):
        return transformers.input_t( function, *args, **keywd )
    return creator

def inout( *args, **keywd ):
    def creator( function ):
        return transformers.inout_t( function, *args, **keywd )
    return creator

def input_static_array( *args, **keywd ):
    def creator( function ):
        return transformers.input_static_array_t( function, *args, **keywd )
    return creator

def output_static_array( *args, **keywd ):
    def creator( function ):
        return transformers.output_static_array_t( function, *args, **keywd )
    return creator

def modify_type( *args, **keywd ):
    def creator( function ):
        return transformers.type_modifier_t( function, *args, **keywd )
    return creator

def input_c_buffer( *args, **keywd ):
    def creator( function ):
        return transformers.input_c_buffer_t( function, *args, **keywd )
    return creator

def transfer_ownership( *args, **keywd ):
    def creator( function ):
        return transformers.transfer_ownership_t( function, *args, **keywd )
    return creator
