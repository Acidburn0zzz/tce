<!-- 

    Compiler backend algorithm chain configuration for the gcc 2.7.0-based
    compiler.

    Can be used for debugging/comparing to the new LLVM-based compiler.
-->

<scheduler-configuration>

    <!-- 

    Generate annotations from old stack code. 

    -->
	<pass>
		<module>
			<name>OldFrontendStackAnalyzerPass</name>
			<file>LinearScanAllocator/OldFrontendStackAnalyzerPass.so</file>
		</module>
	</pass>


    <!-- 

    Allocate registers as a prepass using the linear scan register
    allocator algorithm.

    The pass also generates all stack handling code (spills, context save,
    argument passing, etc.). 

    -->
	<pass>
		<module>
			<name>LinearScanAllocatorPass</name>
			<file>LinearScanAllocator/LinearScanAllocatorPass.so</file>
		</module>
	</pass>

    <!--
    Elementary guard allocator. Is able to only predicate using a single
    global boolean (predicate) register.

    Future versions should use guards (and predicated execution) more
    efficiently.
    -->
	<pass>
		<module>
			<name>SimpleGuardAllocatorPass</name>
			<file>LinearScanAllocator/SimpleGuardAllocatorPass.so</file>
		</module>
	</pass>

    <!--
    Address space mapper. maps addresspace to address space of target machine.
    -->

	<pass>
		<module>
			<name>AddressSpaceMapperPass</name>
			<file>LinearScanAllocator/AddressSpaceMapperPass.so</file>
		</module>
	</pass>

    <!--
    The basic block scheduler algorithm. 
    -->
	<pass>
		<module>
			<name>BasicBlockSchedulerPass</name>
			<file>BasicBlockScheduler/BasicBlockSchedulerPass.so</file>
		</module>
        <!-- Bypasser given as helper module -->
		<module>
			<name>CLBBypasserModule</name>
			<file>BasicBlockScheduler/CLBBypasserModule.so</file>
            <option name="swb-lookback-distance">1</option>
		</module>
    	<!-- Delay slot filler given as helper module -->
		<module>
			<name>CopyingDSFillerModule</name>
			<file>BasicBlockScheduler/CopyingDSFillerModule.so</file>
		</module>

	</pass>
</scheduler-configuration>
