/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file ProGeScriptGenerator.icc
 *
 * Implementation of ProGeScriptGenerator class template part.
 *
 * @author Esa Määttä 2007 (esa.maatta-no.spam-tut.fi)
 * @note rating: red
 */

#include <boost/regex.hpp>

#include "FileSystem.hh"

/** 
 * Finds regex matching strings from a container.
 *
 * Finds std::string entries from containers that match given regex.
 * Case is ignored when matching.
 * 
 * @param perlre Perl syntax regex.
 * @param files Container for strings to match against.
 * @param found Strings that matched are appended to this list. 
 */
template <typename T>
void ProGeScriptGenerator::findFiles(
    const std::string& perlre,
    T files,
    std::list<std::string>& found) {

    static const boost::regex re(perlre, 
         boost::regex::perl|boost::regex::icase);

    typename T::const_iterator iter = files.begin();
    while (iter != files.end()) {
        if (regex_match(*iter, re)) {
            found.push_back(*iter);
        } 
        ++iter;
    }
}

/** 
 * Removes regex matching strings from a container.
 *
 * Finds std::string entries from containers that don't match given regex.
 * Case is ignored when matching. Strings that do not match are removed from
 * container. 
 * 
 * @param perlre Perl syntax regex.
 * @param files Container of strings.
 */
template <typename T>
void ProGeScriptGenerator::findFiles(
    const std::string& perlre,
    T& files) {

    static const boost::regex re(perlre, 
         boost::regex::perl|boost::regex::icase);

    typename T::iterator iter = files.begin();
    while (iter != files.end()) {
        if (!regex_match(*iter, re)) {
            iter = files.erase(iter);
        } else {
            ++iter;
        }
    }
}

/** 
 * Removes duplicate filenames considering their path from a container.
 * 
 * @param files Container holding the filenames.
 * @param rootDirectory Base directory for relative paths in files container.
 */
template <typename CONT>
void ProGeScriptGenerator::uniqueFileNames(
    CONT& files,
    const std::string& rootDirectory) {
    
    typename CONT::iterator ito = files.begin();
    typename CONT::iterator iti;
    while (ito != files.end()) {
        iti = files.begin();
        while (iti != files.end()) {
            if (iti != ito &&
                FileSystem::compareFileNames(*ito, *iti, rootDirectory)) {
                iti = files.erase(iti);
            } else {
                ++iti;
            }
        }
        ++ito;
    }
}

