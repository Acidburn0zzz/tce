/*
    Copyright (c) 2002-2009 Tampere University of Technology.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file SchedulingResource.icc
 *
 * In-line definitions for Scheduling Resource class
 *
 * @author Vladimir Guzma 2006 (vladimir.guzma-no.spam-tut.fi)
 * @note rating: red
 */

/**
 * Return the name of resource
 * return Name of resource
 */
inline const std::string&
SchedulingResource::name() const {
    return name_;
}

/**
 * Test if resource is InputPSocketResource
 * @return True if resource is InputPSocketResource
 */
inline bool
SchedulingResource::isInputPSocketResource() const {
    return false;
}

/**
  * Test if resource is OutputPSocketResource
  * @return True if resource is OutputPSocketResource
 */
inline bool
SchedulingResource::isOutputPSocketResource() const {
    return false;
}

/**
 * Test if resource is ShortImmPSocketResource.
 *
 * @return True if resource is ShortImmPSocketResource.
 */
inline bool
SchedulingResource::isShortImmPSocketResource() const {
    return false;
}

/**
  * Test if resource is InputFUResource
  * @return True if resource is InputFUResource
 */

inline bool
SchedulingResource::isInputFUResource() const {
    return false;
}

/**
  * Test if resource is OutputFUResource
  * @return True if resource is OutputFUResource
 */
inline bool
SchedulingResource::isOutputFUResource() const {
    return false;
}

/**
  * Test if resource is ExecutionPipelineResource
  * @return True if resource is ExecutionPipelineResource
 */
inline bool
SchedulingResource::isExecutionPipelineResource() const {
    return false;
}

/**
  * Test if resource is BusResource
  * @return True if resource is BusResource
 */
inline bool
SchedulingResource::isBusResource() const {
    return false;
}

/**
  * Test if resource is SegmentResource
  * @return True if resource is SegmentResource
 */

inline bool
SchedulingResource::isSegmentResource() const {
    return false;
}
/**
  * Test if resource is IUResource
  * @return True if resource is IUResource
 */

inline bool
SchedulingResource::isIUResource() const {
    return false;
}
/**
  * Test if resource is ITemplateResource
  * @return True if resource is ITemplateResource
 */

inline bool
SchedulingResource::isITemplateResource() const {
    return false;
}
/**
 * Test if all resource in dependent groups are of type
 * supported by relevant resource
 * @return true if resources are of correct types
 */

inline bool
SchedulingResource::validateDependentGroups()  {
    return false;
}
/**
 * Test if all resource in related groups are of type
 * supported by relevant resource
 * @return true if resources are of correct types
 */

inline bool
SchedulingResource::validateRelatedGroups() {
    return false;
}

/**
 * Comparison operator. favours least used resources.
 * @param other other schedulignresource which with to compare.
 */
inline bool 
SchedulingResource::operator < (const SchedulingResource& other) const
{
    if (useCount() < other.useCount()) {
        return true;
    } 
    if (useCount() > other.useCount()) {
        return false;
    }
    return name() < other.name();
}
