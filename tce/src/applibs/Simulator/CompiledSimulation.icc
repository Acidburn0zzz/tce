/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file CompiledSimulation.icc
 *
 * Inline definitions of CompiledSimulation class.
 *
 * @author Viljami Korhonen 2007 (viljami.korhonen@tut.fi)
 * @note rating: red
 */

/**
 * Adds a SimValue to the FU's results list; Used to simulate the FU latency
 * 
 * @param results The FU results list
 * @param cycleCount # of cycles at the time of the addition
 * @param value value to be added
 * @param latency Latency of the FU
 */
void inline
CompiledSimulation::addFUResult(
    FUResultType& results, 
    ClockCycleCount cycleCount,
    const SimValue& value, 
    int latency) {
        
    // Find the next empty slot and put the result there
    for (int i = 0; i < results.size; ++i) {
        FUResultElementType& result = results.data[i];
        if (!result.used) {
            result.cycles = cycleCount + latency;
            result.value = value;
            result.used = true;
            results.numberOfElements++;
            return;
        }
    }
}

/**
 * Adds a UIntWord value to the FU's results; Used to simulate the FU latency
 * 
 * @param results The FU results list
 * @param cycleCount # of cycles at the time of the addition
 * @param value value to be added
 * @param latency Latency of the FU
 */
void inline
CompiledSimulation::addFUResult(
    FUResultType& results, 
    ClockCycleCount cycleCount,
    const UIntWord& value, 
    int latency) {
        
    // Find the next empty slot and put the result there
    for (int i = 0; i < results.size; ++i) {
        FUResultElementType& result = results.data[i];
        if (!result.used) {
            result.cycles = cycleCount + latency;
            result.value.value_.uIntWord = value;
            result.used = true;
            results.numberOfElements++;
            return;
        }
    }
}


/**
 * Grabs values from the FU results list
 * 
 * @param target Target of the assignment
 * @param results The FU results to be checked for
 * @param cycles The current cyclecount
 */
void inline
CompiledSimulation::FUResult(
    SimValue& target, FUResultType& results, ClockCycleCount cycles) {
    
    int maxDiff = -2147483647;
        
    for (int i = 0; results.numberOfElements != 0 && i < results.size; ++i) {
        FUResultElementType& result = results.data[i];
        
        if (!result.used) {
            continue;
        }
        
        int diff = static_cast<int>(result.cycles - cycles);
        if (diff <= 0) {
            if (diff >= maxDiff) {
                maxDiff = diff;
                target = result.value;
            }
            result.used = false;
            results.numberOfElements--;
        } else {
             //i++;
        }
    }
}


void inline
CompiledSimulation::clearFUResults(FUResultType& results) {
    
    if (results.numberOfElements == 0) {
        return;
    }
    
    for (int i = 0; i < results.size; ++i) {
        results.data[i].used = false;
    }
    results.numberOfElements = 0;
}
