/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file FUState.icc
 *
 * Inline definition of FUState class.
 *
 * @author Pekka J‰‰skel‰inen 2005 (pjaaskel@cs.tut.fi)
 * @note rating: red
 */

/**
 * Set function unit to triggered state.
 *
 * It means that an operation was triggered in the current clock cycle.
 */
inline void
FUState::setTriggered() {
    trigger_ = true;
    idle_ = false;
}

/**
 * Set next triggered operation.
 *
 * We do not check that executor for the operation is found, it is left
 * for client's responsibility. Executor is searched for in endClock().
 *
 * @param operation Operation to be triggered next.
 */
inline void
FUState::setOperation(Operation& operation) {
    nextOperation_ = &operation;
    nextExecutor_ = NULL;
}

/**
 * Set next triggered operation.
 *
 * Version in which the client has searched in advance the executor to be 
 * used for the operation.
 *
 * @param operation Operation to be triggered next.
 * @param executor The executor to be used.
 */
inline void
FUState::setOperation(Operation& operation, OperationExecutor& executor) {
    nextOperation_ = &operation;
    nextExecutor_ = &executor;
}

/**
 * A function for checking whether the FU is in idle state.
 *
 * If an FU is in idle state, its endClock() or advanceClock() need not
 * be called. This saves some time in simulation loop.
 *
 * @return True in case the FU is in idle state, that is, no operations are
 *         pending and there are no operations with clocked state.
 */
inline bool
FUState::isIdle() {
    return idle_ && context().isEmpty();
}
