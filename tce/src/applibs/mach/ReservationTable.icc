/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file ReservationTable.icc
 *
 * Inline implementation of ReservationTable class.
 *
 * @author Pekka J‰‰skel‰inen 2007 (pekka.jaaskelainen-no.spam-tut.fi)
 * @note rating: red
 */

#include "BaseType.hh"

/**
 * Answers the contention query.
 *
 * Both reservation tables must be of same size. This implementation is
 * quite slow.
 *
 * @param anotherReservationTable The resource table of the issued operation.
 * @param cycle The column offset at which the another table is matched.
 */
inline bool
ReservationTable::conflictsWith(
    const ReservationTable& anotherReservationTable, int cycle) const {

    BitMatrix shifted(*this);
    for (int i = 0; i < cycle; ++i) {
        shifted.shiftLeft();
    }
    return anotherReservationTable.conflictsWith(shifted);
}

/**
 * Issues an operation.
 *
 * Merges the operation's resource table to this one.
 *
 * @param anotherReservationTable The resource table of the merged.
 */
inline void
ReservationTable::issueOperation(ReservationTable& anotherReservationTable) {
    BitMatrix::orWith(anotherReservationTable);
}

/**
 * Advances the simulation cycle count.
 *
 * The reservation table is shifted left once.
 *
 * @todo Check if the table is all zeros (idle), thus nothing needs to be done.
 */
inline void
ReservationTable::advanceCycle() {    
    BitMatrix::shiftLeft();
}

/**
 * Checks if the given resource is reserved at the given cycle.
 *
 * @param resource The resource row.
 * @param cycle The cycle column.
 */
inline bool
ReservationTable::isReserved(ResourceID resource, int cycle) const {
    return BitMatrix::bitAt(cycle, resource);
}
