/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file KeyboardShortcutDialog.cc
 * 
 * Definition of KeyboardShortcutDialog class.
 * 
 * @author Veli-Pekka J‰‰skel‰inen 2004 (vjaaskel@cs.tut.fi)
 * @note rating: red
 */

#include <string>

#include "KeyboardShortcutDialog.hh"
#include "KeyboardShortcut.hh"
#include "WxConversion.hh"
#include "Conversion.hh"

using std::string;


BEGIN_EVENT_TABLE(KeyboardShortcutDialog, wxDialog)
    EVT_CHAR(KeyboardShortcutDialog::onCharEvent)
    EVT_KEY_DOWN(KeyboardShortcutDialog::onCharEvent)
END_EVENT_TABLE()


/**
 * The constructor.
 *
 * @param parent Parent window of the dialog.
 * @param shortcut Shortcut to modify.
 */
KeyboardShortcutDialog::KeyboardShortcutDialog(
    wxWindow* parent, KeyboardShortcut* shortcut):
    wxDialog(parent, -1, _T("Edit keyboard shortcut"), wxDefaultPosition),
    shortcut_(shortcut) {
    
    assert(shortcut != NULL);

    wxBoxSizer* sizer = new wxBoxSizer(wxVERTICAL);
    wxPanel* panel = new wxPanel(this, -1);
    createContents(panel, true, true);
    sizer->Add(panel);
    SetSizer(sizer);
    sizer->Fit(this);
    FindWindow(wxID_OK)->Enable(false);
    panel->SetFocus();
}
    

/**
 * The Destructor.
 */
KeyboardShortcutDialog::~KeyboardShortcutDialog() {
}


/**
 * Transfers data from dialog attributes to dialog widgets.
 * 
 * @return True, if the data was succesfully transfered, false othwerwise.
 */
bool
KeyboardShortcutDialog::TransferDataToWindow() {
    
    string keyName = "";
    
    // set the name of the key
    if (shortcut_->key() > 32 && shortcut_->key() < 127) {
	// character key
	keyName = Conversion::toString(shortcut_->key());
    } else if (shortcut_->key() == 127) {
	// delete key
	keyName = "DEL";
    } else if (shortcut_->fKey() != 0) {
	// function key
	keyName = "F"+Conversion::toString(shortcut_->fKey());
    }
    
    wxString key = WxConversion::toWxString(keyName);
    
    // prepend key modifiers
    if (shortcut_->alt()) {
	key.Prepend(_T("ALT - "));
    }
    if (shortcut_->ctrl()) {
	key.Prepend(_T("CTRL - "));
    }

    shortcutField_->SetLabel(key);

    return true;
}



/**
 * Sets a new shortcut for the command.
 * 
 * @param event Keyevent of the new shortcut.
 */
void
KeyboardShortcutDialog::onCharEvent(wxKeyEvent& event) {
    
    int keycode = event.GetKeyCode();
    // check that key code is valid
    if (!((keycode >= int('0') && keycode <= int('9')) ||
	  (keycode >= int('A') && keycode <= int('Z')) ||
	  (keycode == 127) ||
	  (keycode >= WXK_F1 && keycode <= WXK_F12))) {
	
	return;
    }
    
    // Check that character key shortcut has at least control
    // or alt modifier.
    if (keycode < 256 &&
	!(event.AltDown() || event.ControlDown())) {
	return;
    }

    shortcut_->setAlt(event.AltDown());
    shortcut_->setCtrl(event.ControlDown());

    if (keycode < 256) {
	// character key shortcut
	shortcut_->setFKey(0);
        shortcut_->setKey(keycode);
    } else if(keycode >= WXK_F1 && keycode <= WXK_F12) {
	// function key shortcut
	shortcut_->setKey(0);
        shortcut_->setFKey(keycode - WXK_F1 + 1);
    } else {
	// invalid shortcut
	assert(false);
    }
    
    FindWindow(wxID_OK)->Enable(true);
    TransferDataToWindow();
}


/**
 * Creates the dialog contents.
 * 
 * This function was initially generated by wxDesigner.
 * @return Main sizer of the created contents.
 * @param parent The dialog window.
 * @param call_fit If true, fits the contents inside the dialog.
 * @param set_sizer If true, sets the main sizer as dialog contents.
 */
wxSizer*
KeyboardShortcutDialog::createContents(			       
    wxWindow *parent, bool call_fit, bool set_sizer) {
    
    wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
    wxStaticText *item1 = new wxStaticText( parent, -1, 
        wxT("Redefine the shortcut by pressing\n"
        "keys for the new key combination."),
        wxDefaultPosition, wxDefaultSize, wxALIGN_CENTRE );
    item0->Add( item1, 0, wxALIGN_CENTER|wxALL, 10 );
    wxStaticBox *item3 = new wxStaticBox( parent, -1, wxT("Shortcut:") );
    wxStaticBoxSizer *item2 = new wxStaticBoxSizer( item3, wxHORIZONTAL );

    shortcutField_ =
	 new wxStaticText(parent, ID_SHORTCUT, wxT(""), wxDefaultPosition,
			  wxDefaultSize, 0);
    item2->Add(shortcutField_, 0, wxALIGN_CENTER|wxALL, 5 );
    item0->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );
    wxStaticLine *item5 =
	new wxStaticLine(parent, -1, wxDefaultPosition, wxSize(20,-1),
			 wxLI_HORIZONTAL );
    item0->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );
    wxBoxSizer *item6 = new wxBoxSizer( wxHORIZONTAL );
    wxButton *item7 =
	new wxButton(parent, wxID_OK, wxT("OK"), wxDefaultPosition,
		     wxDefaultSize, 0);
    item6->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );
    wxButton *item8 =
	new wxButton(parent, wxID_CANCEL, wxT("Cancel"), wxDefaultPosition,
		     wxDefaultSize, 0);
    item6->Add( item8, 0, wxALIGN_CENTER|wxALL, 5 );
    item0->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    if (set_sizer) {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
	{
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}
