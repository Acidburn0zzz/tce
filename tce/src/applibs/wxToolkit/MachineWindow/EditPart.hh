/**
 * @file EditPart.hh
 *
 * Declaration of EditPart class.
 *
 * @author Ari Metsähalme 2003 (ari.metsahalme@tut.fi)
 * @note rating: yellow
 * @note reviewed Jul 13 2004 by vpj, ll, jn, am
 */

#ifndef TTA_EDIT_PART_HH
#define TTA_EDIT_PART_HH

#include <vector>
#include <set>

class Figure;
class wxPoint;
class EditPolicy;
class Request;
class ComponentCommand;

namespace TTAMachine {
    class MachinePart;
}

/**
 * Connects a model object to a graphical object on the canvas.
 *
 * An EditPart receives Requests generated by user actions and
 * converts them to possible changes in the model (Commands) using its
 * EditPolicies. EditParts can contain other EditParts as children.
 * Every EditPart has a Figure.
 */
class EditPart {
public:
    EditPart();
    virtual ~EditPart();

    void putGarbage(std::set<EditPart*>& trashbag);
    EditPart* parent() const;
    void setParent(EditPart* parent);
    TTAMachine::MachinePart* model() const;
    void setModel(TTAMachine::MachinePart* model);
    Figure* figure() const;
    void setFigure(Figure* figure);
    EditPart* find(wxPoint point);
    EditPart* find(const TTAMachine::MachinePart* model);
    bool selectable() const;
    bool selected() const;
    void setSelectable(bool selectable);
    void setSelected(bool select);
    void installEditPolicy(EditPolicy* editpolicy);
    void addChild(EditPart* child);
    int childCount() const ;
    EditPart* child(unsigned int index) const;
    ComponentCommand* performRequest(Request* request) const;
    bool canHandle(Request* request) const;

protected:
    /// Parent of this EditPart.
    EditPart* parent_;
    /// Figure of this EditPart.
    Figure* figure_;
    /// Machine component corresponding to this EditPart.
    TTAMachine::MachinePart* model_;
    /// Tells whether the EditPart is selectable or not.
    bool selectable_;
    /// Tells whether the EditPart is selected or not.
    bool selected_;

    /// Helper member to prevent improper deletion.
    bool garbageCollected_;

    /// List of supported EditPolicies.
    std::vector<EditPolicy*> editPolicies_;
    /// List of children EditParts.
    std::vector<EditPart*> children_;

private:
    /// Assignment not allowed.
    EditPart& operator=(EditPart& old);
    /// Copying not allowed.
    EditPart(EditPart& old);
};

#include "EditPart.icc"

#endif
