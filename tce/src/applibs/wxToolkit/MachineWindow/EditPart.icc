/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file EditPart.icc
 *
 * Inline implementation of EditPart class.
 *
 * @author Ari Metsähalme 2004 (ari.metsahalme-no.spam-tut.fi)
 * @note rating: yellow
 * @note reviewed Jul 13 2004 by vpj, ll, jn, am
 */

#include "Application.hh"

/**
 * Returns the parent of this EditPart.
 *
 * @return Parent of this EditPart.
 */
inline EditPart*
EditPart::parent() const {
    return parent_;
}

/**
 * Sets the parent EditPart.
 *
 * @param parent New parent.
 */
inline void
EditPart::setParent(EditPart* parent) {
    parent_ = parent;
}

/**
 * Returns the model object corresponding to this EditPart.
 *
 * @return The model object corresponding to this EditPart.
 */
inline TTAMachine::MachinePart*
EditPart::model() const {
    return model_;
}

/**
 * Sets the corresponding model object.
 *
 * @param model New model object.
 */
inline void
EditPart::setModel(TTAMachine::MachinePart* model) {
    model_ = model;
}

/**
 * Returns the Figure of this EditPart.
 *
 * @return Figure of this EditPart.
 */
inline Figure*
EditPart::figure() const {
    return figure_;
}

/**
 * Sets the Figure.
 *
 * @param figure New Figure.
 */
inline void
EditPart::setFigure(Figure* figure) {
    figure_ = figure;
}

/**
 * Tells whether the EditPart is selectable or not.
 *
 * @return True if selectable, false otherwise.
 */
inline bool
EditPart::selectable() const {
    return selectable_;
}

/**
 * Tells if the EditPart is selected.
 *
 * @return True if selected.
 */
inline bool
EditPart::selected() const {
    return selected_;
}

/**
 * Sets selectability of the EditPart.
 *
 * @param selectable True if selectable, false otherwise.
 */
inline void
EditPart::setSelectable(bool selectable) {
    selectable_ = selectable;
}

/**
 * Sets selection status of the EditPart.
 *
 * @param select True to select, false to unselect.
 */
inline void
EditPart::setSelected(bool select) {
    selected_ = select;
}

/**
 * Returns the number of children.
 *
 * @return The number of child EditParts.
 */
inline int
EditPart::childCount() const {
    return children_.size();
}

/**
 * Returns the child corresponding to the given index.
 *
 * @param index Index of the child EditPart to return
 * @return The child corresponding to the given index.
 */
inline EditPart*
EditPart::child(unsigned int index) const {
    assert(index < children_.size());
    return children_[index];
}
