/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file Guard.icc
 *
 * Inline implementation of Guard classes.
 *
 * @author Lasse Laasonen 2004 (lasse.laasonen@tut.fi)
 */

namespace TTAMachine {

/**
 * Returns the parent bus of the guard.
 *
 * @return The parent bus of the guard.
 */
inline Bus*
Guard::parentBus() const {
    return parent_;
}


/**
 * Returns true if the guard is inverted, otherwise false.
 *
 * @return True if the guard is inverted, otherwise false.
 */
inline bool
Guard::isInverted() const {
    return inverted_;
}


/////////////////////////////////////////////////////////////////////////////
// PortGuard
/////////////////////////////////////////////////////////////////////////////

/**
 * Returns the port from which the condition term is taken.
 *
 * @return The port from which the condition term is taken.
 */
inline FUPort*
PortGuard::port() const {
    return port_;
}


/////////////////////////////////////////////////////////////////////////////
// RegisterGuard
/////////////////////////////////////////////////////////////////////////////

/**
 * Returns the register file which contains the register from which the
 * condition term is taken.
 *
 * @return The register file which contains the register from which the
 *         condition term is taken.
 */
inline RegisterFile*
RegisterGuard::registerFile() const {
    return regFile_;
}


/**
 * Returns the index of the register in register file from which the
 * condition term is taken.
 *
 * @return The index of the register in register file from which the
 *         condition term is taken.
 */
inline int
RegisterGuard::registerIndex() const {
    return registerIndex_;
}
}
