/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file Segment.icc
 *
 * Inline implementation of Segment class.
 *
 * @author Lasse Laasonen 2004 (lasse.laasonen-no.spam-tut.fi)
 * @note reviewed 14 Jun 2004 by am, tr, ao, ll
 * @note rating: red
 */

namespace TTAMachine {

/**
 * Returns the name of the segment.
 *
 * @return Name of the segment.
 */
inline std::string
Segment::name() const {
    return name_;
}


/**
 * Returns the number of connections to sockets in this segment.
 *
 * @return The number of connections.
 */
inline int
Segment::connectionCount() const {
    return connections_.size();
}


/**
 * Returns the parent bus of the segment.
 *
 * @return Parent bus of the segment.
 */
inline Bus*
Segment::parentBus() const {
    return parent_;
}


/**
 * Returns the source segment or NULL if source segment does not exist.
 *
 * @return The source segment or NULL if source segment does not exist.
 */
inline Segment*
Segment::sourceSegment() const {
    return sourceSegment_;
}


/**
 * Returns the destination segment or NULL if destination segment does not
 * exist.
 *
 * @return The destination segment or NULL if destination segment does not
 *         exist.
 */
inline Segment*
Segment::destinationSegment() const {
    return destinationSegment_;
}
}
