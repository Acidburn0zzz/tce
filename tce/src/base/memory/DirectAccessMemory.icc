/**
 * Writes 1 MAU to the memory as fast as possible
 * 
 * @param address address to write
 * @param data data to be written
 * @note No bounds checking is made so the address is expected to be valid!
 */
void inline
DirectAccessMemory::fastWriteMAU(Word address, UIntWord data) {  
    data_->writeData(address - start_, (int)(data & mask_));
}

/**
 * Writes 2 MAUs to the memory as fast as possible
 * 
 * @param address address to write
 * @param data data to be written
 * @note No bounds checking is made so the address is expected to be valid!
 */
void inline
DirectAccessMemory::fastWrite2MAUs(Word address, UIntWord data) {  
    const Word index = address - start_;
    data_->writeData(index, (int)((data >> MAUSize_) & mask_));
    data_->writeData(index + 1, (int)(data & mask_));
}

/**
 * Writes 4 MAUs to the memory as fast as possible
 * 
 * @param address address to write
 * @param data data to be written
 * @note No bounds checking is made so the address is expected to be valid!
 */
void inline
DirectAccessMemory::fastWrite4MAUs(Word address, UIntWord data) {  
    const Word index = address - start_;
    data_->writeData(index, (int)((data >> MAUSize3_) & mask_));
    data_->writeData(index + 1, (int)((data >> MAUSize2_) & mask_));
    data_->writeData(index + 2, (int)((data >> MAUSize_) & mask_));
    data_->writeData(index + 3, (int)(data & mask_));
}

/**
 * Reads 1 MAU from the memory as fast as possible
 * 
 * @param address address to read
 * @param data reference to the read data
 * @note No bounds checking is made so the address is expected to be valid!
 */
void inline
DirectAccessMemory::fastReadMAU(Word address, UIntWord& data) {
    data = data_->readData(address - start_);
}

/**
 * Reads 2 MAUs from the memory as fast as possible
 * 
 * @param address address to read
 * @param data reference to the read data
 * @note No bounds checking is made so the address is expected to be valid!
 */
void inline
DirectAccessMemory::fastRead2MAUs(Word address, UIntWord& data) {
    const Word index = address - start_;
    data = data_->readData(index) << MAUSize_;
    data |= data_->readData(index + 1);
}

/**
 * Reads 4 MAUs from the memory as fast as possible
 * 
 * @param address address to read
 * @param data reference to the read data
 * @note No bounds checking is made so the address is expected to be valid!
 */
void inline
DirectAccessMemory::fastRead4MAUs(Word address, UIntWord& data) {
    const Word index = address - start_;
    data = data_->readData(index) << MAUSize3_;
    data |= data_->readData(index + 1) << MAUSize2_;
    data |= data_->readData(index + 2) << MAUSize_;
    data |= data_->readData(index + 3);
}

