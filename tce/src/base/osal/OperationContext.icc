/**
 * @file OperationContext.icc
 *
 * Inline definitions of OperationContext class.
 *
 * @author Pekka J‰‰skel‰inen 2004 (pekka.jaaskelainen@tut.fi)
 * @note rating: yellow
 * @note reviewed 7 September 2004 by pj, jn, jm, ao
 */

#include "Application.hh"
#include "BaseType.hh"

/**
 * Returns a reference to a Memory Module wrapper instance.
 *
 * This instance can be accessed by the function unit and behavior 
 * simulation methods to simulate memory access.
 *
 * @return The Memory instance.
 */
inline Memory& 
OperationContext::memory() {
    return *memory_;
}

/**
 * Sets the reference to a Memory Module instance.
 *
 * This instance can be accessed by the function unit and behavior 
 * simulation methods to simulate memory access.
 *
 * @param memory The Memory instance.
 */
inline void
OperationContext::setMemory(Memory* memory) {
    memory_ = memory;
}

/**
 * Returns the unique id of the OperationContext instance.
 *
 * @return The unique id for the OperationContext instance.
 */
inline int 
OperationContext::contextId() const {
    return contextId_;
}

/**
 * Returns a reference to the current value of the program counter register.
 *
 * The value of the program counter can be changed through this reference. 
 * This is used to implement control transfer operations like jumps and calls 
 * to subroutines. 
 *
 * @return The program counter value as a reference.
 */
inline InstructionAddress& 
OperationContext::programCounter() {
    return programCounter_;
}

/**
 * Returns a reference to the current value of the return address register.
 *
 * The value of the return address can be changed through this reference. 
 * This is used in implementing calls to subroutines.
 *
 * @return The return address value as a reference.
 */
inline SimValue&
OperationContext::returnAddress() {
    return returnAddress_;
}

/**
 * Makes the return address to be saved in the RA register.
 *
 * This is used by CALL instruction to save the RA before jumping.
 *
 * @param value Value to set to.
 * @return The return address value as a reference.
 */
inline void
OperationContext::setSaveReturnAddress(bool value) {
    saveReturnAddress_ = value;
}

/**
 * Returns true if RA should saved before executing next control flow 
 * operation.
 *
 * @return The return address value as a reference.
 */
inline bool
OperationContext::saveReturnAddress() {
    return saveReturnAddress_;
}


/**
 * Generates an unique context id for the current OperationContext instance.
 */
inline void
OperationContext::initializeContextId() {
    contextId_ = nextContextId_;
    ++nextContextId_;
}

/**
 * Returns true if there are no operation state objects stored in the
 * context.
 *
 * @return True if there are no operation state objects stored in the
 * context.
 */
inline bool 
OperationContext::isEmpty() const {
    return stateRegistry_.size() == 0;
}

/**
 * Returns true if the context has memory model associated with it.
 * 
 * @return True if the context has memory model associated with it.
 */
inline bool
OperationContext::hasMemoryModel() const {
    return (memory_ != NULL);
}

