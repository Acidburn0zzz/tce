/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file OperationIndex.icc
 *
 * Inline implementations of OperationIndex class.
 *
 * @author Jussi Nykänen 2004 (nykanen-no.spam-cs.tut.fi)
 * @note rating: yellow
 * @note reviewed 19 August 2004 by pj, jn, ao, ac
 */

/**
 * Returns the path by the given index in the search path list.
 *
 * @param i The index of wanted search path.
 * @return The search path by the given index or empty string.
 * @exception OutOfRange If index i is out of range.
 */
inline std::string
OperationIndex::path(int i) const 
    throw (OutOfRange) {

    if (i < 0 || static_cast<unsigned>(i) > paths_.size() - 1) {
        std::string msg = "Index out of range";
        throw OutOfRange(__FILE__, __LINE__, __func__, msg);
    }
    return paths_[i];
}

/**
 * Returns the number of search paths.
 *
 * @return The number of search paths.
 */
inline int
OperationIndex::pathCount() const {
    return paths_.size();
}

/**
 * Returns the number of OperationModules.
 *
 * @return The number of OperationModules.
 */
inline int
OperationIndex::moduleCount() const {
    return modules_.size();
}

/**
 * Returns the module by the given index.
 *
 * @param i The index of wanted OperationModule.
 * @return The module by the given index or if not found, null module.
 * @exception OutOfRange If index i is out of range.
 */
inline OperationModule&
OperationIndex::module(int i) 
    throw (OutOfRange) {
 
    if (i < 0 || static_cast<unsigned>(i) > modules_.size() - 1) {
        std::string msg = "index out of range";
        throw OutOfRange(__FILE__, __LINE__, __func__, msg);
    }
    return *modules_[i];
}
