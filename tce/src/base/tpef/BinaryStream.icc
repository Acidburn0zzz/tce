/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file BinaryStream.icc
 *
 * Implementation of BinaryStream class inline functions.
 *
 * @author Ari Metsähalme 2003 (ari.metsahalme-no.spam-tut.fi)
 * @note reviewed 7 August 2003 by pj, am, jn, ao, rl
 *
 * @note rating: yellow
 */

#include "Exception.hh"
#include "BinaryStream.hh"

namespace TPEF {

/**
 * Reads a single byte from the stream.
 *
 * Opens the stream if it's not opened yet.
 *
 * @return One byte from the stream.
 * @exception UnreachableStream If stream is bad.
 * @exception EndOfFile If end of file was reached unexpectedly.
 */
inline Byte
BinaryStream::getByte() throw (UnreachableStream, EndOfFile) {
    if (!iStream_.is_open()) {
        openInput(fileName_);
    }
    
    if (iStream_.bad()) {
        throw UnreachableStream(__FILE__, __LINE__, __func__, fileName_);
    }
    if (iStream_.eof()) {
        throw EndOfFile(__FILE__, __LINE__, __func__, fileName_);
    }

    Byte result = iStream_.get();

    if (iStream_.bad()) {
        throw UnreachableStream(__FILE__, __LINE__, __func__, fileName_);
    }

    return result;
}


/**
 * Writes a single byte to the stream.
 *
 * Opens the stream if it's not opened yet.
 *
 * @note If write position is set past the end of file, putByte will throw
 *       UnreachableStream exception.
 *
 * @param byte The byte to write to the stream.
 * @exception UnreachableStream If stream is bad.
 * @exception WritePastEOF If write position is set past the end of
 *            file and writing is attempted.
 */
inline void
BinaryStream::putByte(Byte byte) throw (UnreachableStream, WritePastEOF){

    if (extOStream_ != NULL) {
        extOStream_->put(byte);
        return;
    }

    if (!oStream_.is_open()) {
        openOutput(fileName_);
    }

    if (oStream_.bad()) {
        throw UnreachableStream(__FILE__, __LINE__, __func__, fileName_);
    }

    unsigned int writePos = oStream_.tellp();
    oStream_.seekp(0, std::ios::end);
    unsigned int eofPos = oStream_.tellp();

    if (writePos > eofPos) {
        oStream_.seekp(writePos);
        throw WritePastEOF(__FILE__, __LINE__, __func__, fileName_);
    }

    oStream_.seekp(writePos);
    oStream_.put(byte);

    if (oStream_.bad()) {
        throw UnreachableStream(__FILE__, __LINE__, __func__, fileName_);
    }

}

}
