/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file ReferenceKey.icc
 *
 * Inline and template functions for ReferenceKey classes.
 *
 * @author Pekka J‰‰skel‰inen 2003 (pjaaskel@cs.tut.fi)
 * @note reviewed 17 Oct 2003 by am, rm, kl
 *
 * @note rating: yellow
 */

namespace TPEF {
namespace ReferenceManager {
///////////////////////////////////////////////////////////////////////////////
// SectionIndexKey
///////////////////////////////////////////////////////////////////////////////

/**
 * Returns the section identification code for this key.
 *
 * @return Section identification code.
 */
inline SectionId
SectionIndexKey::sectionId() const {
    return sectionId_;
}

/**
 * Returns the index this key is set to.
 *
 * @return Index.
 */
inline SectionIndex
SectionIndexKey::index() const {
    return index_;
}

/**
 * Equality operator for SectionIndexKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys have same data.
 */
inline bool
SectionIndexKey::operator==(const SectionIndexKey& other) const {
    return sectionId_ == other.sectionId_ && index_ == other.index_;
}

/**
 * Inequality operator for SectionIndexKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
SectionIndexKey::operator!=(const SectionIndexKey& other) const {
    return !(*this == other);
}

/**
 * Smaller than operator for SectionIndexKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
SectionIndexKey::operator<(const SectionIndexKey& other) const {
    return (sectionId_ < other.sectionId_) ||
            (sectionId_ == other.sectionId_ &&
             index_ < other.index_);
}

///////////////////////////////////////////////////////////////////////////////
// SectionOffsetKey
///////////////////////////////////////////////////////////////////////////////

/**
 * Returns the section identification code for this key.
 *
 * @return Section identification code.
 */
inline SectionId
SectionOffsetKey::sectionId() const {
    return sectionId_;
}

/**
 * Returns the offset this key is set to.
 *
 * @return Offset.
 */
inline SectionOffset
SectionOffsetKey::offset() const {
    return offset_;
}

/**
 * Equality operator for SectionOffsetKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys have same data.
 */
inline bool
SectionOffsetKey::operator==(const SectionOffsetKey& other) const {
    return sectionId_ == other.sectionId_ && offset_ == other.offset_;
}

/**
 * Inequality operator for SectionOffsetKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
SectionOffsetKey::operator!=(const SectionOffsetKey& other) const {
    return !(*this == other);
}

/**
 * Smaller than operator for SectionOffsetKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
SectionOffsetKey::operator<(const SectionOffsetKey& other) const {
    return (sectionId_ < other.sectionId_) ||
        (sectionId_ == other.sectionId_ &&
         offset_ < other.offset_);
}

///////////////////////////////////////////////////////////////////////////////
// FileOffsetKey
///////////////////////////////////////////////////////////////////////////////

/**
 * Returns the file offset this key is set to.
 *
 * @return File offset.
 */
inline FileOffset
FileOffsetKey::fileOffset() const {
    return fileOffset_;
}

/**
 * Equality operator for FileOffsetKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys have same data.
 */
inline bool
FileOffsetKey::operator==(const FileOffsetKey& other) const {
    return fileOffset_ == other.fileOffset_;
}

/**
 * Inequality operator for FileOffsetKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
FileOffsetKey::operator!=(const FileOffsetKey& other) const {
    return !(*this == other);
}

/**
 * Smaller than operator for FileOffsetKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
FileOffsetKey::operator<(const FileOffsetKey& other) const {
    return (fileOffset_ < other.fileOffset_);
}

///////////////////////////////////////////////////////////////////////////////
// SectionKey
///////////////////////////////////////////////////////////////////////////////

/**
 * Returns the section identification code for this key.
 *
 * @return Section identification code.
 */
inline SectionId
SectionKey::sectionId() const {
    return sectionId_;
}

/**
 * Equality operator for SectionKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys have same data.
 */
inline bool
SectionKey::operator==(const SectionKey& other) const {
    return sectionId_ == other.sectionId_;
}

/**
 * Inequality operator for SectionKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
SectionKey::operator!=(const SectionKey& other) const {
    return !(*this == other);
}

/**
 * Smaller than operator for SectionKey.
 *
 * @param other Another key to compare to.
 * @return True if the keys don't have same data.
 */
inline bool
SectionKey::operator<(const SectionKey& other) const {
    return sectionId_ < other.sectionId_;
}

} // namespace ReferenceManager

}
