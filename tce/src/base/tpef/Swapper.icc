/*
    Copyright (c) 2002-2009 Tampere University of Technology.

    This file is part of TTA-Based Codesign Environment (TCE).

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
 */
/**
 * @file Swapper.icc
 *
 * Implementation of Swapper class inline and template functions.
 *
 * @author Jussi Nykänen 2003 (nykanen-no.spam-cs.tut.fi)
 * @author Ari Metsähalme 2003 (ari.metsahalme-no.spam-tut.fi)
 * @note reviewed 23 October 2003 by am, jn, ll, pj
 *
 * @note rating: yellow
 */

#include <tce_config.h>

namespace TPEF {

/**
 * Converts a type T data element from host to target byte order if
 * needed.
 *
 * The byte order is changed if the byte order of host and target
 * differ.
 *
 * @param source The source data element.
 * @param dest The return value: Source converted to a Byte pointer
 *        and target byte order.
 */
template <typename T> void
Swapper::fromHostToTargetByteOrder(T source, Byte* dest) {

    Byte* tmp = reinterpret_cast<Byte*>(&source);

    if (needHostTargetSwap()) {
        swap(tmp, sizeof(T));
    }

    for (unsigned int i = 0; i < sizeof(T); i++) {
        dest[i] = tmp[i];
    }
}

/**
 * Converts a type T data element from target to host byte order if
 * needed.
 *
 * The byte order is changed if the byte order of host and target
 * differ.
 *
 * @param source The source data element.
 * @param dest The return value: Source converted to type T and host
 *        byte order.
 */
template <typename T> void
Swapper::fromTargetToHostByteOrder(Byte* source, T& dest) {
    if (needHostTargetSwap()) {
        swap(source, sizeof(T));
    }
    dest = *(reinterpret_cast<T*>(source));
}


/**
 * Converts a Byte pointer representing a type T data element in big-endian
 * byte order to host byte order.
 *
 * The byte order is changed if the host is not using big-endian byte order.
 *
 * @param source Source data element in Bytes.
 * @param dest The return value: Source converted to type T and host
 *        byte order.
 */
template <typename T> void
Swapper::fromBigEndianToHostByteOrder(Byte* source, T& dest) {
    if (!isHostBigEndian()) {
        swap(source, sizeof(T));
    }
    dest = *(reinterpret_cast<T*>(source));
}


/**
 * Converts a type T data element to big-endian byte order.
 *
 * The byte order is changed if the host is not using big-endian byte order.
 *
 * @param source Source data element.
 * @param dest The return value: Source converted to a Byte pointer
 *        and big-endian byte order.
 */
template <typename T> void
Swapper::fromHostToBigEndianByteOrder(T source, Byte* dest) {

    Byte* tmp = reinterpret_cast<Byte*>(&source);

    if (!isHostBigEndian()) {
        swap(tmp, sizeof(T));
    }

    for (unsigned int i = 0; i < sizeof(T); i++) {
        dest[i] = tmp[i];
    }
}

/**
 * Converts a type T data element to little-endian byte order.
 *
 * The byte order is changed if the host don't use little-endian byte order.
 *
 * @param source Source data element.
 * @param dest The return value: Source converted to a Byte pointer
 *        and little-endian byte order.
 */
template <typename T> void
Swapper::fromHostToLittleEndianByteOrder(T source, Byte* dest) {

    Byte* tmp = reinterpret_cast<Byte*>(&source);

    if (isHostBigEndian()) {
        swap(tmp, sizeof(T));
    }

    for (unsigned int i = 0; i < sizeof(T); i++) {
        dest[i] = tmp[i];
    }
}

/**
 * Determines whether byte order swapping between target and host
 * machines is needed or not.
 *
 * @return True if target and host byte order differ, false otherwise.
 */
inline bool
Swapper::needHostTargetSwap(){
    if (WORDS_BIGENDIAN && !TARGET_WORDS_BIGENDIAN) {
        return true;
    } else if (!WORDS_BIGENDIAN && TARGET_WORDS_BIGENDIAN) {
        return true;
    } else{
        return false;
    }
}


/**
 * Returns true if host is using big-endian byte order, false otherwise.
 * 
 * @return True if host is using big-endian byte order, false otherwise.
 */
inline bool
Swapper::isHostBigEndian(){
    if (WORDS_BIGENDIAN) {
        return true;
    } else {
        return false;
    }
}


/**
 * Swaps the byte order of the parameter.
 *
 * @param p The Byte block to be swapped (also the return value).
 * @param size Number of Bytes in the block.
 */
inline void
Swapper::swap(Byte* p, int size){
    for (int i = 0; i < size-1-i; ++i) {
        Byte tmp;
        tmp = p[i];
        p[i] = p[size-1-i];
        p[size-1-i] = tmp;
    }
}

}
