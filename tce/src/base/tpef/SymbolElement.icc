/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file SymbolElement.icc
 *
 * Inline definitions of SymbolElement class.
 *
 * @author Jussi Nykänen 2003 (nykanen@cs.tut.fi)
 * @author Mikael Lepistö 18.12.2003 (tmlepist@cs.tut.fi)
 * @note reviewed 22 October 2003 by ml, jn, ao, tr
 *
 * @note rating: yellow
 */

namespace TPEF {

/**
 * Returns is the element absolute or relocating.
 *
 * @return Is the element absolute or relocating.
 */
inline bool
SymbolElement::absolute() const {
    return absolute_;
}

/**
 * Sets is the element absolute or relocating.
 *
 * @param anAbsoluteness True if absolute,
 */
inline void
SymbolElement::setAbsolute(bool anAbsoluteness) {
    absolute_ = anAbsoluteness;
}

/**
 * Returns the binding type.
 *
 * @return The binding type.
 */
inline SymbolElement::SymbolBinding
SymbolElement::binding() const {
    return bind_;
}

/**
 * Sets the binding type.
 *
 * @param aBind The binding type.
 */
inline void
SymbolElement::setBinding(SymbolBinding aBind) {
    bind_ = aBind;
}

/**
 * Returns the name.
 *
 * @return The name.
 */
inline Chunk*
SymbolElement::name() const {
    return dynamic_cast<Chunk*>(name_->pointer());
}

/**
 * Sets the name.
 *
 * @param aName The name.
 */
inline void
SymbolElement::setName(const ReferenceManager::SafePointer* aName) {
    name_ = aName;
}

/**
 * Sets the name.
 *
 * @param aName The name.
 */
inline void
SymbolElement::setName(Chunk* aName) {
    name_ = ReferenceManager::SafePointer::replaceReference(name_, aName);
}

/**
 * Returns the section to which the symbol belong.
 *
 * @return The section to which the symbol belong.
 */
inline Section*
SymbolElement::section() const {
    return dynamic_cast<Section*>(section_->pointer());
}

/**
 * Sets the section to which the symbol belong.
 *
 * @param aSect The section to which symbol belong.
 */
inline void
SymbolElement::setSection(const ReferenceManager::SafePointer* aSect) {
    section_ = aSect;
}

/**
 * Sets the section to which the symbol belong.
 *
 * @param aSect The section to which symbol belong.
 */
inline void
SymbolElement::setSection(Section* aSect) {
    section_ = ReferenceManager::SafePointer::replaceReference(section_, aSect);
}

}
