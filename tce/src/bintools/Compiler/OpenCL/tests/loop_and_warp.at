AT_SETUP([combined loop and warp])

AT_DATA([main.c], [
#include <stdlib.h>

void f(void *i);

int main(int argc, char *argv[[]]) {
    int i[[32]];

    f(i);

    return 0;
}
])

AT_DATA([context.c], [
#include <stdio.h>

void f(void) {
    puts("OK");
}
])

$LLVMCC $LLVMCFLAGS -c --emit-llvm main.c
$LLVMCC $LLVMCFLAGS -c --emit-llvm context.c
AT_CHECK([opt -load=$abs_top_builddir/lib/.libs/llvmopencl.so \
          -add-context -external-functions=puts \
          -generate-warps -warp-width=2 1 1 \
          -loop-count=2 1 1 \
          -f -o opencl_context.o context.o])
AT_CHECK([llvm-link -o test.o main.o opencl_context.o])
AT_CHECK([lli test.o], 0, [OK
OK
OK
OK
])

AT_CLEANUP

#-------------------------------------------------------------------------------

AT_SETUP([loop and warp context update])

AT_DATA([main.c], [
#include <stdio.h>
#include <string.h>

struct _thread_context {
    unsigned work_dim;
    unsigned global_size[[3]];
    unsigned global_id[[3]];
    unsigned local_size[[3]];
    unsigned local_id[[3]];
    unsigned num_groups[[3]];
    unsigned group_id[[3]];
};

void f(struct _thread_context *tc);

void g(struct _thread_context *tc);

int main(int argc, char *argv[[]]) {
    struct _thread_context tc;
    memset(&tc, 0, sizeof(tc));

    f(&tc);

    return 0;
}

void g(struct _thread_context *tc) {
    printf("OK %d %d %d\n",
           tc->local_id[[0]],
           tc->local_id[[1]],
           tc->local_id[[2]]);
}
])

AT_DATA([context.c], [
#include <stdio.h>

void g(void);

void f(void) {
    g();
}
])

$LLVMCC $LLVMCFLAGS -c --emit-llvm main.c
$LLVMCC $LLVMCFLAGS -c --emit-llvm context.c
AT_CHECK([opt -load=$abs_top_builddir/lib/.libs/llvmopencl.so \
          -add-context -external-functions=printf \
          -generate-warps -warp-width=2 2 2 \
          -loop-count=2 2 2 \
          -f -o opencl_context.o context.o])
AT_CHECK([llvm-link -o test.o main.o opencl_context.o])
AT_CHECK([lli test.o | sort], 0, [OK 0 0 0
OK 0 0 1
OK 0 0 2
OK 0 0 3
OK 0 1 0
OK 0 1 1
OK 0 1 2
OK 0 1 3
OK 0 2 0
OK 0 2 1
OK 0 2 2
OK 0 2 3
OK 0 3 0
OK 0 3 1
OK 0 3 2
OK 0 3 3
OK 1 0 0
OK 1 0 1
OK 1 0 2
OK 1 0 3
OK 1 1 0
OK 1 1 1
OK 1 1 2
OK 1 1 3
OK 1 2 0
OK 1 2 1
OK 1 2 2
OK 1 2 3
OK 1 3 0
OK 1 3 1
OK 1 3 2
OK 1 3 3
OK 2 0 0
OK 2 0 1
OK 2 0 2
OK 2 0 3
OK 2 1 0
OK 2 1 1
OK 2 1 2
OK 2 1 3
OK 2 2 0
OK 2 2 1
OK 2 2 2
OK 2 2 3
OK 2 3 0
OK 2 3 1
OK 2 3 2
OK 2 3 3
OK 3 0 0
OK 3 0 1
OK 3 0 2
OK 3 0 3
OK 3 1 0
OK 3 1 1
OK 3 1 2
OK 3 1 3
OK 3 2 0
OK 3 2 1
OK 3 2 2
OK 3 2 3
OK 3 3 0
OK 3 3 1
OK 3 3 2
OK 3 3 3
])

AT_CLEANUP

#-------------------------------------------------------------------------------

AT_SETUP([loop and warp variable replication])

AT_DATA([main.c], [
#include <stdio.h>
#include <string.h>

struct _thread_context {
    unsigned work_dim;
    unsigned global_size[[3]];
    unsigned global_id[[3]];
    unsigned local_size[[3]];
    unsigned local_id[[3]];
    unsigned num_groups[[3]];
    unsigned group_id[[3]];
};

void f(struct _thread_context *tc);

unsigned id(int i, struct _thread_context *tc);

int main(int argc, char *argv[[]]) {
    struct _thread_context tc;
    memset(&tc, 0, sizeof(tc));

    f(&tc);

    return 0;
}

unsigned id(int i, struct _thread_context *tc) {
    return tc->local_id[[i]];
}
])

AT_DATA([context.c], [
#include <stdio.h>

unsigned id(int i);

void barrier(void) {}

void f(void) {
    unsigned id0 = id(0);
    unsigned id1 = id(1);
    unsigned id2 = id(2);

    barrier();

    printf("OK %d %d %d\n",
           id0, id1, id2);
}
])

$LLVMCC $LLVMCFLAGS -c --emit-llvm main.c
$LLVMCC $LLVMCFLAGS -c --emit-llvm context.c
AT_CHECK([opt -load=$abs_top_builddir/lib/.libs/llvmopencl.so \
          -add-context -external-functions=printf \
          -generate-warps -warp-width=2 2 2 \
          -loop-count=2 2 2 \
          -f -o opencl_context.o context.o])
AT_CHECK([llvm-link -o test.o main.o opencl_context.o])
AT_CHECK([lli test.o | sort], 0, [OK 0 0 0
OK 0 0 1
OK 0 0 2
OK 0 0 3
OK 0 1 0
OK 0 1 1
OK 0 1 2
OK 0 1 3
OK 0 2 0
OK 0 2 1
OK 0 2 2
OK 0 2 3
OK 0 3 0
OK 0 3 1
OK 0 3 2
OK 0 3 3
OK 1 0 0
OK 1 0 1
OK 1 0 2
OK 1 0 3
OK 1 1 0
OK 1 1 1
OK 1 1 2
OK 1 1 3
OK 1 2 0
OK 1 2 1
OK 1 2 2
OK 1 2 3
OK 1 3 0
OK 1 3 1
OK 1 3 2
OK 1 3 3
OK 2 0 0
OK 2 0 1
OK 2 0 2
OK 2 0 3
OK 2 1 0
OK 2 1 1
OK 2 1 2
OK 2 1 3
OK 2 2 0
OK 2 2 1
OK 2 2 2
OK 2 2 3
OK 2 3 0
OK 2 3 1
OK 2 3 2
OK 2 3 3
OK 3 0 0
OK 3 0 1
OK 3 0 2
OK 3 0 3
OK 3 1 0
OK 3 1 1
OK 3 1 2
OK 3 1 3
OK 3 2 0
OK 3 2 1
OK 3 2 2
OK 3 2 3
OK 3 3 0
OK 3 3 1
OK 3 3 2
OK 3 3 3
])

AT_CLEANUP