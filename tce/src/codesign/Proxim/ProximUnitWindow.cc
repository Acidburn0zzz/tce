/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file ProximUnitWindow.cc
 *
 * Definition of ProximUnitWindow class.
 *
 * @author Veli-Pekka J‰‰skel‰inen 2006 (vjaaskel-no.spam-cs.tut.fi)
 * @note rating: red
 */


#include <string>
#include <wx/statline.h>
#include <wx/listctrl.h>

#include "ProximUnitWindow.hh"
#include "Proxim.hh"
#include "WxConversion.hh"
#include "TracedSimulatorFrontend.hh"
#include "ProximSimulationThread.hh"


BEGIN_EVENT_TABLE(ProximUnitWindow, wxPanel)
    EVT_SIMULATOR_STOP(0, ProximUnitWindow::onSimulationStop)
    EVT_SIMULATOR_PROGRAM_LOADED(0, ProximUnitWindow::onProgramLoaded)
    EVT_CHOICE(ID_UNIT_CHOICE, ProximUnitWindow::onChoice)
    EVT_CHOICE(ID_MODE_CHOICE, ProximUnitWindow::onChoice)
    EVT_BUTTON(ID_CLOSE, ProximUnitWindow::onClose)
END_EVENT_TABLE()

using std::string;
using namespace TTAMachine;

const wxString ProximUnitWindow::MODE_INT = _T("Int");
const wxString ProximUnitWindow::MODE_UNSIGNED = _T("Unsigned");
const wxString ProximUnitWindow::MODE_HEX = _T("Hex");
const wxString ProximUnitWindow::MODE_BIN = _T("Binary");

/**
 * Constructor.
 *
 * @param parent Parent window of the window.
 * @param id Window identifier.
 */
ProximUnitWindow::ProximUnitWindow(
    ProximMainFrame* parent, int id):
    ProximSimulatorWindow(parent, id),
    unitChoice_(NULL),
    valueList_(NULL) {

    createContents(this, true, true);

    simulator_ = wxGetApp().simulation()->frontend();

    unitChoice_ = dynamic_cast<wxChoice*>(FindWindow(ID_UNIT_CHOICE));
    modeChoice_ = dynamic_cast<wxChoice*>(FindWindow(ID_MODE_CHOICE));
    valueList_ = dynamic_cast<wxListCtrl*>(FindWindow(ID_VALUE_LIST));

    modeChoice_->Append(MODE_INT);
    modeChoice_->Append(MODE_UNSIGNED);
    modeChoice_->Append(MODE_HEX);
    modeChoice_->Append(MODE_BIN);
    modeChoice_->SetSelection(0);

}


/**
 * Destructor.
 */
ProximUnitWindow::~ProximUnitWindow() {    
}


/**
 * Called when the unit choicer needs to be reinitialized.
 */
void
ProximUnitWindow::reinitialize() {
}


/**
 * Event handler which is called when a new program is loaded in the simulator.
 */
void
ProximUnitWindow::onProgramLoaded(const SimulatorEvent&) {
    reinitialize();
}


/**
 * Called when the value list needs to be updated.
 */
void
ProximUnitWindow::update() {
}


/**
 * Event handler for simulation stop.
 *
 * Updates the value list.
 */
void
ProximUnitWindow::onSimulationStop(const SimulatorEvent&) {
    update();
}


/**
 * Event handler for the dialog mode and unit choicers.
 *
 * Updates the values list.
 */
void
ProximUnitWindow::onChoice(wxCommandEvent&) {
    update();
}

/**
 * Event handler for the Close button.
 *
 * Closes the window by destroying the parent frame of the window.
 */
void
ProximUnitWindow::onClose(wxCommandEvent&) {
    wxFrame* parent = dynamic_cast<wxFrame*>(GetParent());
    if (parent != NULL) {
	parent->Destroy();
    }
}


/**
 * Creates the window contents.
 *
 * Code generated by wxWidgets.
 *
 * @param parent Parent window of the dialog contents.
 * @param call_fit If true, created contents are fit inside the parent window.
 * @param set_sizer If true, created top level sizer is set as the parent
 *                  window contents.
 * @return Top level sizer of the created widgets.
 */
wxSizer*
ProximUnitWindow::createContents(
    wxWindow* parent, bool call_fit, bool set_sizer) {

    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 2 );

    wxGridSizer *item1 = new wxGridSizer( 2, 0, 0 );

    wxString *strs2 = (wxString*) NULL;
    wxChoice *item2 = new wxChoice( parent, ID_UNIT_CHOICE, wxDefaultPosition, wxSize(120,-1), 0, strs2, 0 );
    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxString *strs3 = (wxString*) NULL;
    wxChoice *item3 = new wxChoice( parent, ID_MODE_CHOICE, wxDefaultPosition, wxSize(120,-1), 0, strs3, 0 );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item4 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxListCtrl *item5 = new wxListCtrl( parent, ID_VALUE_LIST, wxDefaultPosition, wxDefaultSize, wxLC_REPORT|wxSUNKEN_BORDER );
    item0->Add( item5, 0, wxGROW|wxALL, 5 );

    wxStaticLine *item6 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(20,-1), wxLI_HORIZONTAL );
    item0->Add( item6, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxGridSizer *item7 = new wxGridSizer( 2, 0, 0 );

    wxButton *item8 = new wxButton( parent, ID_HELP, wxT("&Help"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item8, 0, wxALIGN_CENTER_VERTICAL, 5 );

    wxButton *item9 = new wxButton( parent, ID_CLOSE, wxT("&Close"), wxDefaultPosition, wxDefaultSize, 0 );
    item7->Add( item9, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetSizer( item0 );
        if (call_fit)
            item0->SetSizeHints( parent );
    }
    
    return item0;
}
