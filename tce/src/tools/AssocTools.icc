/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file AssocTools.icc
 *
 * Tools for handling STL Associative Containers (usually set).
 *
 * Inline and template definitions.
 *
 * @author Pekka J‰‰skel‰inen 2007 (pekka.jaaskelainen-no.spam-tut.fi) 
 */

#include <algorithm>

/**
 *
 * Deletes all items in a map and clears it.
 *
 * Calls delete for all items in container and clears it.
 *
 * @param aMap The map to delete all items from.
 */
template <typename ContainerType>
void
AssocTools::deleteAllItems(ContainerType& aMap) {

    typename ContainerType::iterator next;
    for (typename ContainerType::iterator i = aMap.begin();
        i != aMap.end(); ) {

        // This trick is necessary because this same container can be
        // modified (element erased) in the destructor of the deleted
        // object. It would render the iterator faulty. Note that this
        // works only for associative containers, with vectors the
        // next iterator would get corrupted too.
        next = i;
        next++;
        delete (*i);
        i = next;
    }

    aMap.clear();
}

/**
 * Delete all values in a map and clears it.
 *
 * @param aMap The map to delete the values from.
 */
template <typename ContainerType>
void
AssocTools::deleteAllValues(ContainerType& aMap) {

    for (typename ContainerType::iterator i = aMap.begin(); i != aMap.end();
         i++) {
        delete (*i).second;
    }
    aMap.clear();
}

/**
 * Checks if an element is found by the given key from the given container.
 *
 * @param aContainer The container to look in.
 * @param aKey The key to look for.
 * @return True if the key is found, otherwise false.
 */
template <typename ContainerType, typename KeyType>
bool
AssocTools::containsKey(
    const ContainerType& aContainer,
    const KeyType& aKey) {

    return (aContainer.find(aKey) != aContainer.end());
}




/**
 * Constructs set difference of the given containers.
 *
 * The elements in the difference are selected by using < operator
 * of the elements in the container. If the first given container contains
 * an element that the second does not, it is added to the difference.
 *
 * @param firstContainer The first container.
 * @param secondContainer The second container.
 * @param difference Result set. Updated by adding all elements in the first
 *            container that are not in the second container.
 */
template <typename ContainerType>
void
AssocTools::difference(
    const ContainerType& firstContainer,
    const ContainerType& secondContainer,
    ContainerType& difference) {

    std::insert_iterator<ContainerType>
        differenceIter(difference, difference.end());
    std::set_difference(firstContainer.begin(), firstContainer.end(),
                        secondContainer.begin(), secondContainer.end(),
                        differenceIter);
}

/**
 * Finds all pair-wise combinations of elements in two containers.
 *
 * @return A set of pairs containing all combinations of elements.
 */
template <typename ContainerType1, typename ContainerType2>
std::set<std::pair<
             typename ContainerType1::value_type, 
             typename ContainerType2::value_type> >
AssocTools::pairs(
    ContainerType1& firstContainer,
    ContainerType2& secondContainer) {

    typedef std::set<std::pair<
    typename ContainerType1::value_type, 
        typename ContainerType2::value_type> > CombinationSet;
    CombinationSet combinations;
    for (typename ContainerType1::const_iterator i1 = firstContainer.begin();
         i1 != firstContainer.end(); ++i1) {
        for (typename ContainerType2::const_iterator i2 = 
                 secondContainer.begin(); i2 != secondContainer.end(); ++i2) {
            combinations.insert(std::make_pair(*i1, *i2));
        }
    }
    return combinations;
}

/**
 * Finds all pair-wise combinations of elements in two containers.
 *
 * @return A set of pairs containing all combinations of elements.
 */
template <typename Comparator,typename ContainerType1, typename ContainerType2>
std::set<std::pair<
    typename ContainerType1::value_type, 
    typename ContainerType2::value_type>, Comparator >
AssocTools::pairs(
    ContainerType1& firstContainer,
    ContainerType2& secondContainer) {

    typedef std::set<std::pair<
    typename ContainerType1::value_type, 
        typename ContainerType2::value_type>, Comparator > CombinationSet;
    CombinationSet combinations;
    for (typename ContainerType1::const_iterator i1 = firstContainer.begin();
         i1 != firstContainer.end(); ++i1) {
        for (typename ContainerType2::const_iterator i2 = 
                 secondContainer.begin(); i2 != secondContainer.end(); ++i2) {
            combinations.insert(std::make_pair(*i1, *i2));
        }
    }
    return combinations;
}


/**
 * Appends all data from the first container to the second.
 */
template <typename ContainerType>
void AssocTools::append(const ContainerType& src, ContainerType &dest) {
    for (typename ContainerType::const_iterator i = src.begin(); 
         i != src.end(); i++) {
        dest.insert(*i);
    }
}
