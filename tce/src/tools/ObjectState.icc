/*
    Copyright 2002-2008 Tampere University of Technology.  All Rights
    Reserved.

    This file is part of TTA-Based Codesign Environment (TCE).

    TCE is free software; you can redistribute it and/or modify it under the
    terms of the GNU General Public License version 2 as published by the Free
    Software Foundation.

    TCE is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
    FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
    details.

    You should have received a copy of the GNU General Public License along
    with TCE; if not, write to the Free Software Foundation, Inc., 51 Franklin
    St, Fifth Floor, Boston, MA  02110-1301  USA

    As a special exception, you may use this file as part of a free software
    library without restriction.  Specifically, if other files instantiate
    templates or use macros or inline functions from this file, or you compile
    this file and link it with other files to produce an executable, this
    file does not by itself cause the resulting executable to be covered by
    the GNU General Public License.  This exception does not however
    invalidate any other reasons why the executable file might be covered by
    the GNU General Public License.
*/
/**
 * @file ObjectState.icc
 *
 * Inline implementation of ObjectState class.
 *
 * @author Lasse Laasonen 2003 (lasse.laasonen-no.spam-tut.fi)
 * @note reviewed 8 Jun 2004 by tr, jm, am, ll
 * @note rating: red
 */

#include "Conversion.hh"

/**
 * Returns the parent of the ObjectState instance.
 *
 * If there is no parent, returns null pointer.
 *
 * @return Parent of the ObjectState instance.
 */
inline ObjectState*
ObjectState::parent() const {
    return parent_;
}


/**
 * Returns the name of the object.
 *
 * @return Name of the object.
 */
inline std::string
ObjectState::name() const {
    return name_;
}


/**
 * Sets the name of the object.
 *
 * @param name The new name.
 */
inline void
ObjectState::setName(const std::string& name) {
    name_ = name;
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(const std::string& value) {
    value_ = value;
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(int value) {
    value_ = Conversion::toString(value);
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(double value) {
    value_ = Conversion::toString(value);
}


/**
 * Sets the value of the object.
 *
 * @param value Value of the object.
 */
inline void
ObjectState::setValue(bool value) {
    value_ = Conversion::toString(value);
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 */
inline std::string
ObjectState::stringValue() const {
    return value_;
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 * @exception NumberFormatException If the value cannot be converted to int.
 */
inline int
ObjectState::intValue() const
    throw (NumberFormatException) {

    return Conversion::toInt(value_);
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 * @exception NumberFormatException If the value cannot be converted to
 *                                  double.
 */
inline double
ObjectState::doubleValue() const
    throw (NumberFormatException) {

    return Conversion::toDouble(value_);
}


/**
 * Returns the value of the node.
 *
 * @return Value of the node.
 * @exception TypeMismatch If the value cannot be converted to boolean.
 */
inline bool
ObjectState::boolValue() const
    throw (TypeMismatch) {

    int intValue;
    try {
        intValue = this->intValue();
    } catch (const NumberFormatException& exception) {
        const std::string procName = "ObjectState::boolValue";
        throw TypeMismatch(__FILE__, __LINE__, procName);
    }

    return intValue;
}


/**
 * Returns the number of attributes of the ObjectState instance.
 *
 * @return Number of attributes.
 */
inline int
ObjectState::attributeCount() const {
    return attributes_.size();
}


/**
 * Returns the number of child instances of the ObjectState instance.
 *
 * @return The number of children.
 */
inline int
ObjectState::childCount() const {
    return children_.size();
}
