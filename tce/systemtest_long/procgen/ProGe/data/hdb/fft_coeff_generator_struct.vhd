-- VHDL Entity WORK.FFT_coeff_generator.symbol
--
-- Created:
--          by - tpitkane.tpitkane (elros)
--          at - 10:24:59 11/21/05
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2004.1 (Build 41)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
--library MOVE;
--use MOVE.userdef_functional_units.all;

ENTITY FFT_coeff_generator IS
   GENERIC( 
      dataw      : integer := 32;
      N          : integer := 1024;
      stage_bits : integer := 3;
      addr_width : integer := 8
   );
   PORT( 
      clk      : IN     std_logic;
      index    : IN     std_logic_vector (dataw-1 DOWNTO 0);
      stage    : IN     std_logic_vector (dataw-1 DOWNTO 0);
      t1load_1 : IN     std_logic;
      t1load_2 : IN     std_logic;
      coeff    : OUT    STD_LOGIC_VECTOR (dataw-1 DOWNTO 0)
   );

-- Declarations

END FFT_coeff_generator ;

--
-- VHDL Architecture WORK.FFT_coeff_generator.struct
--
-- Created:
--          by - tpitkane.tpitkane (elros)
--          at - 10:24:59 11/21/05
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2004.1 (Build 41)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE IEEE.std_logic_signed.all;
LIBRARY WORK;
USE WORK.coefficients.all;

LIBRARY WORK;

ARCHITECTURE struct OF FFT_coeff_generator IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL addr_out     : std_logic_vector(addr_width-1 DOWNTO 0);
   SIGNAL addr_out_reg : std_logic_vector(addr_width-1 DOWNTO 0);
   SIGNAL coeff1       : STD_LOGIC_VECTOR(dataw-1 DOWNTO 0);
   SIGNAL opcode       : std_logic_vector(2 DOWNTO 0);
   SIGNAL opcode_1     : std_logic_vector(2 DOWNTO 0);
   SIGNAL opcode_2     : std_logic_vector(2 DOWNTO 0);
   SIGNAL rom_coeff    : STD_LOGIC_VECTOR(dataw-1 DOWNTO 0);


   -- Component Declarations
   COMPONENT addrgen
   GENERIC (
      dataw      : integer;
      addr_width : integer;
      N          : integer;
      stage_bits : INTEGER
   );
   PORT (
      index    : IN     std_logic_vector (dataw-1 DOWNTO 0);
      stage    : IN     std_logic_vector (dataw-1 DOWNTO 0);
      addr_out : OUT    std_logic_vector (addr_width-1 DOWNTO 0);
      opcode   : OUT    std_logic_vector (2 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT coeff_regen
   GENERIC (
      dataw : INTEGER
   );
   PORT (
      coeff        : IN     STD_LOGIC_VECTOR (dataw-1 DOWNTO 0);
      opcode       : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      transf_coeff : OUT    STD_LOGIC_VECTOR (dataw-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT dff_load
   GENERIC (
      dataw : integer
   );
   PORT (
      data_in  : IN     std_logic_vector (dataw-1 DOWNTO 0);
      clk      : IN     std_logic ;
      load     : IN     std_logic ;
      data_out : OUT    std_logic_vector (dataw-1 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT mem
   GENERIC (
      dataw : INTEGER;
      address_width : integer
   );
   PORT (
      address  : IN     STD_LOGIC_VECTOR (address_width-1 DOWNTO 0);
      data_out : OUT    STD_LOGIC_VECTOR (dataw-1 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : addrgen USE ENTITY work.addrgen(rtl2);
   FOR ALL : coeff_regen USE ENTITY work.coeff_regen(rtl2);
   FOR ALL : dff_load USE ENTITY work.dff_load;
   FOR ALL : mem USE ENTITY work.mem(rtl);
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   addrgen_1 : addrgen
      GENERIC MAP (
         dataw      => dataw,
         N          => N,
         stage_bits => stage_bits,
         addr_width => addr_width
      )
      PORT MAP (
         stage    => stage,
         index    => index,
         addr_out => addr_out,
         opcode   => opcode
      );
   coeff_regen_1 : coeff_regen
      GENERIC MAP (
         dataw => dataw
      )
      PORT MAP (
         opcode       => opcode_2,
         coeff        => coeff1,
         transf_coeff => coeff
      );
   addr_out_reg_1 : dff_load
      GENERIC MAP (
         dataw => addr_width
      )
      PORT MAP (
         data_in  => addr_out,
         clk      => clk,
         load     => t1load_1,
         data_out => addr_out_reg
      );
   addr_out_reg_2 : dff_load
      GENERIC MAP (
         dataw => dataw
      )
      PORT MAP (
         data_in  => rom_coeff,
         clk      => clk,
         load     => t1load_2,
         data_out => coeff1
      );
   opcode_reg_1 : dff_load
      GENERIC MAP (
         dataw => 3
      )
      PORT MAP (
         data_in  => opcode,
         clk      => clk,
         load     => t1load_1,
         data_out => opcode_1
      );
   opcode_reg_2 : dff_load
      GENERIC MAP (
         dataw => 3
      )
      PORT MAP (
         data_in  => opcode_1,
         clk      => clk,
         load     => t1load_2,
         data_out => opcode_2
      );
   coeff_memory : mem
      GENERIC MAP (
         dataw => dataw,
         address_width => addr_width
      )
      PORT MAP (
         address  => addr_out_reg,
         data_out => rom_coeff
      );

END struct;
