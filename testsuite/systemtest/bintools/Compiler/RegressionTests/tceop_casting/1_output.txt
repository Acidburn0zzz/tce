#define _TCE_ADDSUB(i1, i2, o1, o2) do { int __tce_op_output_1 = (int)0; int __tce_op_output_2 = (int)0; asm volatile ("ADDSUB":"=r"( __tce_op_output_1), "=r"( __tce_op_output_2):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;o2 = __tce_op_output_2;} while(0) 
#define _TCE_ADD(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm volatile ("ADD":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_XOR(i1, i2, o1) do { unsigned __tce_op_output_1 = (unsigned)0; asm volatile ("XOR":"=r"( __tce_op_output_1):"ir"((unsigned)(i1)), "ir"((unsigned)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_MUL(i1, i2, o1) do { int __tce_op_output_1 = (int)0; asm volatile ("MUL":"=r"( __tce_op_output_1):"ir"((int)(i1)), "ir"((int)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_DIVU(i1, i2, o1) do { unsigned __tce_op_output_1 = (unsigned)0; asm volatile ("DIVU":"=r"( __tce_op_output_1):"ir"((unsigned)(i1)), "ir"((unsigned)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_ADDF(i1, i2, o1) do { float __tce_op_output_1 = (float)0; asm volatile ("ADDF":"=r"( __tce_op_output_1):"ir"((float)(i1)), "ir"((float)(i2))); o1 = __tce_op_output_1;} while(0) 
#define _TCE_MULF(i1, i2, o1) do { float __tce_op_output_1 = (float)0; asm volatile ("MULF":"=r"( __tce_op_output_1):"ir"((float)(i1)), "ir"((float)(i2))); o1 = __tce_op_output_1;} while(0) 
0x000020f3
