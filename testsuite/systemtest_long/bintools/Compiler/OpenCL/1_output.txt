You are compiling OpenCL code with software floating point emulation!
Expect abysmal peformance!
result[0]: (0.000000, 0.000000, 0.000000, 0.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 0.000000 OK
result[1]: (1.000000, 1.000000, 1.000000, 1.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 10.000000 OK
result[2]: (2.000000, 2.000000, 2.000000, 2.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 20.000000 OK
result[3]: (3.000000, 3.000000, 3.000000, 3.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 30.000000 OK
result[4]: (4.000000, 4.000000, 4.000000, 4.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 40.000000 OK
result[5]: (5.000000, 5.000000, 5.000000, 5.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 50.000000 OK
result[6]: (6.000000, 6.000000, 6.000000, 6.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 60.000000 OK
result[7]: (7.000000, 7.000000, 7.000000, 7.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 70.000000 OK
result[8]: (8.000000, 8.000000, 8.000000, 8.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 80.000000 OK
result[9]: (9.000000, 9.000000, 9.000000, 9.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 90.000000 OK
result[10]: (10.000000, 10.000000, 10.000000, 10.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 100.000000 OK
result[11]: (11.000000, 11.000000, 11.000000, 11.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 110.000000 OK
result[12]: (12.000000, 12.000000, 12.000000, 12.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 120.000000 OK
result[13]: (13.000000, 13.000000, 13.000000, 13.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 130.000000 OK
result[14]: (14.000000, 14.000000, 14.000000, 14.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 140.000000 OK
result[15]: (15.000000, 15.000000, 15.000000, 15.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 150.000000 OK

You are compiling OpenCL code with software floating point emulation!
Expect abysmal peformance!
Launching the kernel.
NUM_THREADS = 256
NUM_GROUPS = 4
LOCAL_WORK_SIZE = 2
FILE SIZE = 4 KB
Results read back.

Results OK!!!


Starting Cleanup...


You are compiling OpenCL code with software floating point emulation!
Expect abysmal peformance!
result[0]: (0.000000, 0.000000, 0.000000, 0.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 0.000000 OK
result[1]: (1.000000, 1.000000, 1.000000, 1.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 10.000000 OK
result[2]: (2.000000, 2.000000, 2.000000, 2.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 20.000000 OK
result[3]: (3.000000, 3.000000, 3.000000, 3.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 30.000000 OK
result[4]: (4.000000, 4.000000, 4.000000, 4.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 40.000000 OK
result[5]: (5.000000, 5.000000, 5.000000, 5.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 50.000000 OK
result[6]: (6.000000, 6.000000, 6.000000, 6.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 60.000000 OK
result[7]: (7.000000, 7.000000, 7.000000, 7.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 70.000000 OK
result[8]: (8.000000, 8.000000, 8.000000, 8.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 80.000000 OK
result[9]: (9.000000, 9.000000, 9.000000, 9.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 90.000000 OK
result[10]: (10.000000, 10.000000, 10.000000, 10.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 100.000000 OK
result[11]: (11.000000, 11.000000, 11.000000, 11.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 110.000000 OK
result[12]: (12.000000, 12.000000, 12.000000, 12.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 120.000000 OK
result[13]: (13.000000, 13.000000, 13.000000, 13.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 130.000000 OK
result[14]: (14.000000, 14.000000, 14.000000, 14.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 140.000000 OK
result[15]: (15.000000, 15.000000, 15.000000, 15.000000) dot (1.000000, 2.000000, 3.000000, 4.000000) = 150.000000 OK

